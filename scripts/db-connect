#!/bin/bash

SCRIPT_DIR=$(cd $(dirname $0); pwd)
source "${SCRIPT_DIR}/utils.sh"

if [ $# -eq 0 ]; then
    print_error "エラー: 環境を指定してください"
    print_info "使い方: $0 <dev|prd> [psql引数...]"
    print_info "例: "
    echo "  $0 dev                          # 通常の接続"
    echo "  $0 dev -c \"SELECT 1\"            # SQLを実行"
    echo "  $0 dev -f dump.sql              # SQLファイルを実行"
    echo ""
    print_info "ダンプを取得する場合:"
    echo "  $0 dev -c \"\\copy (SELECT * FROM users) TO STDOUT WITH CSV HEADER\" > users.csv"
    exit 1
fi

ENV="$1"
shift  # 最初の引数（環境）を削除して、残りをpsqlに渡す


ACCOUNT_ID=$(login_aws $AWS_PROFILE)
if [ -z "$ACCOUNT_ID" ]; then
    print_error "AWS認証に失敗しました"
    exit 1
fi

case "$ENV" in
    "dev")
        SSM_PARAM_NAME="/kotohiro-dev-db-secret/arn"
        ;;
    "prd"|"prod")
        SSM_PARAM_NAME="/kotohiro-prd-db-secret/arn"

        print_warning "⚠️  注意: 本番環境のデータベースに接続しようとしています！"
        echo -n "本当に接続しますか？ (yes/no): "
        read confirmation

        if [ "$confirmation" != "yes" ]; then
            print_info "接続をキャンセルしました"
            exit 0
        fi

        # 環境名を統一
        ENV="prd"
        ;;
    *)
        print_error "エラー: '$ENV' は無効な環境です"
        print_info "有効な環境: dev, prd (または prod)"
        exit 1
        ;;
esac

print_info "SSMからシークレットARNを取得中..."
SECRET_ARN=$(aws ssm get-parameter --name "$SSM_PARAM_NAME" --query 'Parameter.Value' --output text 2>/dev/null)

if [ $? -ne 0 ] || [ -z "$SECRET_ARN" ]; then
    print_error "エラー: SSMパラメータの取得に失敗しました"
    print_error "パラメータ名: $SSM_PARAM_NAME"
    print_info "AWS認証情報とパラメータ名を確認してください"
    exit 1
fi

print_info "データベース接続情報を取得中..."
SECRET=$(aws secretsmanager get-secret-value --secret-id $SECRET_ARN --query 'SecretString' --output text 2>/dev/null)

if [ $? -ne 0 ]; then
    print_error "エラー: Secrets Managerからの取得に失敗しました"
    print_info "AWS認証情報と権限を確認してください"
    exit 1
fi

RDS_ENDPOINT=$(echo $SECRET | jq -r '.host // .endpoint // .address')
RDS_PORT=$(echo $SECRET | jq -r '.port // "5432"')
RDS_USERNAME=$(echo $SECRET | jq -r '.username // .user')
RDS_PASSWORD=$(echo $SECRET | jq -r '.password')
RDS_DATABASE=$(echo $SECRET | jq -r '.database // .dbname // .engine')

if [ -z "$RDS_ENDPOINT" ] || [ "$RDS_ENDPOINT" = "null" ]; then
    print_error "エラー: RDSエンドポイントが見つかりません"
    print_info "利用可能なキー:"
    echo $SECRET | jq -r 'keys[]'
    exit 1
fi

print_info "${ENV}環境のECSタスクを検索中..."
id=$(
    ecspresso tasks --config ./.ecspresso/api/${ENV}/ecspresso.yml --output=json 2>/dev/null | \
    jq -r '.containers[0].taskArn | split("/")[2]' | \
    head -1
)

if [ -z "$id" ]; then
    print_error "エラー: ${ENV}環境で実行中のECSタスクが見つかりません"
    print_info "タスクが起動していることを確認してください"
    exit 1
fi

print_info "タスクID: $id"
print_info "ポートフォワード開始..."
print_info "localhost:5432 → ${RDS_ENDPOINT}:${RDS_PORT}"

ecspresso exec --config ./.ecspresso/api/${ENV}/ecspresso.yml \
    --port-forward -L 5432:${RDS_ENDPOINT}:${RDS_PORT} --id $id &

PF_PID=$!

if ! kill -0 $PF_PID 2>/dev/null; then
    print_error "エラー: ポートフォワードの開始に失敗しました"
    exit 1
fi

# ポートフォワードが確立されるまで待機
print_info "接続待機中..."
echo ""
print_info "--- ecspresso ---"
for i in {1..10}; do
    if nc -z localhost 5432 2>/dev/null; then
        break
    fi
    if [ $i -eq 10 ]; then
        echo "--- 出力終了 ---"
        echo ""
        print_error "エラー: ポートフォワードの確立に失敗しました"
        kill $PF_PID 2>/dev/null
        exit 1
    fi
    sleep 1
done

sleep 2 # ecspressoの出力が落ち着くまで少し待機
echo "------"
echo ""
print_success "======================================="
print_success "環境: $ENV"
print_success "DB名: $RDS_DATABASE"
print_success "ユーザー: $RDS_USERNAME"
print_success "======================================="
echo ""

psql "postgresql://${RDS_USERNAME}:$(urlencode "$RDS_PASSWORD")@localhost:${RDS_PORT}/${RDS_DATABASE}" "$@"

echo ""
kill $PF_PID &2>/dev/null
