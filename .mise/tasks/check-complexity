#!/bin/bash
set -euo pipefail

readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly MAGENTA='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly BOLD='\033[1m'
readonly NC='\033[0m' # No Color

readonly COGNITIVE_THRESHOLD=15
readonly CYCLOMATIC_THRESHOLD=10

print_header() {
    echo -e "${CYAN}${BOLD}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║              Go コード複雑度分析レポート                     ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

find_go_files() {
    local exclude_paths=(
        "*/vendor/*"
        "*/.git/*"
        "*/.serena/*"
        "*/internal/infrastructure/persistence/sqlc/generated/*"
        "*/internal/presentation/oas/*"
        "*/mock/*"
    )

    local exclude_names=(
        "*.gen.go"
        "*_gen.go"
        "*.sql.go"
        "*.pb.go"
        "*_test.go"
    )

    local find_args=()

    # パスの除外条件を追加
    for path in "${exclude_paths[@]}"; do
        find_args+=("!" "-path" "$path")
    done

    # ファイル名の除外条件を追加
    for name in "${exclude_names[@]}"; do
        find_args+=("!" "-name" "$name")
    done

    find . -type f -name "*.go" "${find_args[@]}" | sort
}

main() {
    print_header

    echo -e "${GREEN}📅 分析日時: $(date '+%Y年%m月%d日 %H:%M:%S')${NC}"

    local files=$(find_go_files)
    local file_count=$(echo "$files" | wc -l | tr -d ' ')
    echo -e "${GREEN}📁 分析対象: ${file_count} ファイル（自動生成除く）${NC}"
    echo ""

    # 認知的複雑度分析（gocognit）
    if command -v go tool gocognit &> /dev/null; then
        echo -e "${MAGENTA}${BOLD}🧠 認知的複雑度が高い関数（${COGNITIVE_THRESHOLD}以上）${NC}"
        echo -e "${CYAN}───────────────────────────────────────────────────────────────────────────────${NC}"

        local cognitive_results=$(echo "$files" | xargs go tool gocognit -over $COGNITIVE_THRESHOLD 2>/dev/null)
        if [[ -n "$cognitive_results" ]]; then
            echo "$cognitive_results"
            local cognitive_count=$(echo "$cognitive_results" | wc -l)
            echo -e "${YELLOW}⚠️  ${cognitive_count}個の関数が要リファクタリング対象です${NC}"
        else
            echo -e "${GREEN}✅ 認知的複雑度${COGNITIVE_THRESHOLD}以上の関数はありません${NC}"
        fi
        echo ""
    else
        echo -e "${YELLOW}⚠️  gocognitがインストールされていません（認知的複雑度分析をスキップ）${NC}"
        echo -e "${YELLOW}   インストール方法: go get tool${NC}"
        echo ""
    fi

    # 循環的複雑度分析（gocyclo）
    if command -v go tool gocyclo &> /dev/null; then
        echo -e "${BLUE}${BOLD}🔄 循環的複雑度が高い関数（${CYCLOMATIC_THRESHOLD}以上）${NC}"
        echo -e "${CYAN}───────────────────────────────────────────────────────────────────────────────${NC}"

        local cyclo_results=$(echo "$files" | xargs go tool gocyclo -over $CYCLOMATIC_THRESHOLD 2>/dev/null)
        if [[ -n "$cyclo_results" ]]; then
            echo "$cyclo_results" | head -20
            local cyclo_count=$(echo "$cyclo_results" | wc -l)
            echo -e "${YELLOW}⚠️  ${cyclo_count}個の関数が要確認対象です${NC}"
        else
            echo -e "${GREEN}✅ 循環的複雑度${CYCLOMATIC_THRESHOLD}以上の関数はありません${NC}"
        fi
        echo ""
    else
        echo -e "${YELLOW}⚠️  gocycloがインストールされていません（循環的複雑度分析をスキップ）${NC}"
        echo -e "${YELLOW}   インストール方法: go get tool${NC}"
        echo ""
    fi

    echo -e "${YELLOW}${BOLD}📊 プロジェクト全体の統計${NC}"
    echo -e "${CYAN}───────────────────────────────────────────────────────────────────────────────${NC}"
    echo "$files" | xargs go tool scc | grep -E "^Go|^Language|^Estimated"
    echo -e "${CYAN}───────────────────────────────────────────────────────────────────────────────${NC}"

    # 推奨事項
    echo ""
    echo -e "${GREEN}${BOLD}💡 リファクタリング推奨事項${NC}"
    echo -e "  ${YELLOW}●${NC} 認知的複雑度 ≥${COGNITIVE_THRESHOLD} の関数は分割を検討してください"
    echo -e "  ${YELLOW}●${NC} 循環的複雑度 ≥${CYCLOMATIC_THRESHOLD} の関数は条件分岐の簡略化を検討してください"
    echo -e "  ${YELLOW}●${NC} 複数の複雑度指標で上位に入るファイルを優先的にリファクタリングしてください"

    # 複雑度の解説
    echo ""
    echo -e "${CYAN}${BOLD}📖 複雑度の目安${NC}"
    echo -e "  ${GREEN}良好${NC}    認知的複雑度 <10  / 循環的複雑度 <5"
    echo -e "  ${YELLOW}要注意${NC}  認知的複雑度 10-20 / 循環的複雑度 5-10"
    echo -e "  ${RED}危険${NC}    認知的複雑度 >20  / 循環的複雑度 >10"
    echo ""
}

echo -e "${CYAN}🔍 必要なツールを確認中...${NC}"

# sccがインストールされているか確認
if ! command -v go tool scc &> /dev/null; then
    echo -e "${RED}❌ エラー: sccがインストールされていません${NC}"
    echo -e "${YELLOW}インストール方法: go get tool${NC}"
    exit 1
fi

tools_status="ツール状態: "
if command -v go tool gocognit &> /dev/null; then
    tools_status="${tools_status}${GREEN}✅${NC} gocognit "
else
    tools_status="${tools_status}${YELLOW}❌${NC} gocognit "
fi

if command -v go tool gocyclo &> /dev/null; then
    tools_status="${tools_status}${GREEN}✅${NC} gocyclo"
else
    tools_status="${tools_status}${YELLOW}❌${NC} gocyclo"
fi

echo -e "$tools_status"
echo ""

main

exit 0
