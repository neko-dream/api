// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: opinion_group_ratio.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const getGroupRatioByOpinionID = `-- name: GetGroupRatioByOpinionID :many
SELECT
  representative_opinions.talk_session_id, representative_opinions.opinion_id, representative_opinions.group_id, representative_opinions.rank, representative_opinions.updated_at, representative_opinions.created_at, representative_opinions.agree_count, representative_opinions.disagree_count, representative_opinions.pass_count
FROM representative_opinions
WHERE representative_opinions.opinion_id = $1::uuid
ORDER BY representative_opinions.created_at DESC
`

type GetGroupRatioByOpinionIDRow struct {
	RepresentativeOpinion RepresentativeOpinion
}

// GetGroupRatioByOpinionID
//
//	SELECT
//	  representative_opinions.talk_session_id, representative_opinions.opinion_id, representative_opinions.group_id, representative_opinions.rank, representative_opinions.updated_at, representative_opinions.created_at, representative_opinions.agree_count, representative_opinions.disagree_count, representative_opinions.pass_count
//	FROM representative_opinions
//	WHERE representative_opinions.opinion_id = $1::uuid
//	ORDER BY representative_opinions.created_at DESC
func (q *Queries) GetGroupRatioByOpinionID(ctx context.Context, opinionID uuid.NullUUID) ([]GetGroupRatioByOpinionIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupRatioByOpinionID, opinionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupRatioByOpinionIDRow
	for rows.Next() {
		var i GetGroupRatioByOpinionIDRow
		if err := rows.Scan(
			&i.RepresentativeOpinion.TalkSessionID,
			&i.RepresentativeOpinion.OpinionID,
			&i.RepresentativeOpinion.GroupID,
			&i.RepresentativeOpinion.Rank,
			&i.RepresentativeOpinion.UpdatedAt,
			&i.RepresentativeOpinion.CreatedAt,
			&i.RepresentativeOpinion.AgreeCount,
			&i.RepresentativeOpinion.DisagreeCount,
			&i.RepresentativeOpinion.PassCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
