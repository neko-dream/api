// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: seed_opinions.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const getSeedOpinions = `-- name: GetSeedOpinions :many
SELECT
    opinions.opinion_id, opinions.talk_session_id, opinions.user_id, opinions.parent_opinion_id, opinions.title, opinions.content, opinions.created_at, opinions.picture_url, opinions.reference_url,
    users.user_id, users.display_id, users.display_name, users.icon_url, users.created_at, users.updated_at, users.email, users.email_verified, users.withdrawal_date,
    COALESCE(rc.reply_count, 0) AS reply_count
FROM opinions
LEFT JOIN users
    ON opinions.user_id = users.user_id
LEFT JOIN (
    SELECT opinions.opinion_id
    FROM opinions
    LEFT JOIN votes
        ON opinions.opinion_id = votes.opinion_id
        AND votes.user_id = $2
    GROUP BY opinions.opinion_id
    HAVING COUNT(votes.vote_id) = 0
) vote_count ON opinions.opinion_id = vote_count.opinion_id
LEFT JOIN (
    SELECT COUNT(opinion_id) AS reply_count, parent_opinion_id as opinion_id
    FROM opinions
    GROUP BY parent_opinion_id
) rc ON rc.opinion_id = opinions.opinion_id
WHERE opinions.talk_session_id = $1
    AND vote_count.opinion_id = opinions.opinion_id
    AND opinions.parent_opinion_id IS NULL
    AND opinions.user_id = '00000000-0000-0000-0000-000000000001'::uuid
LIMIT $3
`

type GetSeedOpinionsParams struct {
	TalkSessionID uuid.UUID
	UserID        uuid.UUID
	Limit         int32
}

type GetSeedOpinionsRow struct {
	Opinion    Opinion
	User       User
	ReplyCount int64
}

// 指定されたユーザーが投票していない意見のみを取得
// この意見に対するリプライ数
// トークセッションに紐づく意見のみを取得
//
//	SELECT
//	    opinions.opinion_id, opinions.talk_session_id, opinions.user_id, opinions.parent_opinion_id, opinions.title, opinions.content, opinions.created_at, opinions.picture_url, opinions.reference_url,
//	    users.user_id, users.display_id, users.display_name, users.icon_url, users.created_at, users.updated_at, users.email, users.email_verified, users.withdrawal_date,
//	    COALESCE(rc.reply_count, 0) AS reply_count
//	FROM opinions
//	LEFT JOIN users
//	    ON opinions.user_id = users.user_id
//	LEFT JOIN (
//	    SELECT opinions.opinion_id
//	    FROM opinions
//	    LEFT JOIN votes
//	        ON opinions.opinion_id = votes.opinion_id
//	        AND votes.user_id = $2
//	    GROUP BY opinions.opinion_id
//	    HAVING COUNT(votes.vote_id) = 0
//	) vote_count ON opinions.opinion_id = vote_count.opinion_id
//	LEFT JOIN (
//	    SELECT COUNT(opinion_id) AS reply_count, parent_opinion_id as opinion_id
//	    FROM opinions
//	    GROUP BY parent_opinion_id
//	) rc ON rc.opinion_id = opinions.opinion_id
//	WHERE opinions.talk_session_id = $1
//	    AND vote_count.opinion_id = opinions.opinion_id
//	    AND opinions.parent_opinion_id IS NULL
//	    AND opinions.user_id = '00000000-0000-0000-0000-000000000001'::uuid
//	LIMIT $3
func (q *Queries) GetSeedOpinions(ctx context.Context, arg GetSeedOpinionsParams) ([]GetSeedOpinionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSeedOpinions, arg.TalkSessionID, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSeedOpinionsRow
	for rows.Next() {
		var i GetSeedOpinionsRow
		if err := rows.Scan(
			&i.Opinion.OpinionID,
			&i.Opinion.TalkSessionID,
			&i.Opinion.UserID,
			&i.Opinion.ParentOpinionID,
			&i.Opinion.Title,
			&i.Opinion.Content,
			&i.Opinion.CreatedAt,
			&i.Opinion.PictureUrl,
			&i.Opinion.ReferenceUrl,
			&i.User.UserID,
			&i.User.DisplayID,
			&i.User.DisplayName,
			&i.User.IconUrl,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.User.Email,
			&i.User.EmailVerified,
			&i.User.WithdrawalDate,
			&i.ReplyCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
