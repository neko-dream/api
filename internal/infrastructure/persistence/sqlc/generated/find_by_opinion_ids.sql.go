// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: find_by_opinion_ids.sql

package model

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const findOpinionsByOpinionIDs = `-- name: FindOpinionsByOpinionIDs :many
SELECT
    opinions.opinion_id, opinions.talk_session_id, opinions.user_id, opinions.parent_opinion_id, opinions.title, opinions.content, opinions.created_at, opinions.picture_url, opinions.reference_url,
    users.user_id, users.display_id, users.display_name, users.icon_url, users.created_at, users.updated_at, users.email, users.email_verified
FROM
    opinions
LEFT JOIN users
    ON opinions.user_id = users.user_id
WHERE
    opinions.opinion_id IN ($1::uuid[])
`

type FindOpinionsByOpinionIDsRow struct {
	Opinion Opinion
	User    User
}

// FindOpinionsByOpinionIDs
//
//	SELECT
//	    opinions.opinion_id, opinions.talk_session_id, opinions.user_id, opinions.parent_opinion_id, opinions.title, opinions.content, opinions.created_at, opinions.picture_url, opinions.reference_url,
//	    users.user_id, users.display_id, users.display_name, users.icon_url, users.created_at, users.updated_at, users.email, users.email_verified
//	FROM
//	    opinions
//	LEFT JOIN users
//	    ON opinions.user_id = users.user_id
//	WHERE
//	    opinions.opinion_id IN ($1::uuid[])
func (q *Queries) FindOpinionsByOpinionIDs(ctx context.Context, opinionID []uuid.UUID) ([]FindOpinionsByOpinionIDsRow, error) {
	rows, err := q.db.QueryContext(ctx, findOpinionsByOpinionIDs, pq.Array(opinionID))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindOpinionsByOpinionIDsRow
	for rows.Next() {
		var i FindOpinionsByOpinionIDsRow
		if err := rows.Scan(
			&i.Opinion.OpinionID,
			&i.Opinion.TalkSessionID,
			&i.Opinion.UserID,
			&i.Opinion.ParentOpinionID,
			&i.Opinion.Title,
			&i.Opinion.Content,
			&i.Opinion.CreatedAt,
			&i.Opinion.PictureUrl,
			&i.Opinion.ReferenceUrl,
			&i.User.UserID,
			&i.User.DisplayID,
			&i.User.DisplayName,
			&i.User.IconUrl,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.User.Email,
			&i.User.EmailVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
