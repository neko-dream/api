// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: find_orguser_by_user_id.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const findOrgUserByUserID = `-- name: FindOrgUserByUserID :many
SELECT
    organization_users.organization_user_id, organization_users.user_id, organization_users.organization_id, organization_users.role, organization_users.created_at, organization_users.updated_at
FROM organization_users
WHERE user_id = $1
`

type FindOrgUserByUserIDRow struct {
	OrganizationUser OrganizationUser
}

// FindOrgUserByUserID
//
//	SELECT
//	    organization_users.organization_user_id, organization_users.user_id, organization_users.organization_id, organization_users.role, organization_users.created_at, organization_users.updated_at
//	FROM organization_users
//	WHERE user_id = $1
func (q *Queries) FindOrgUserByUserID(ctx context.Context, userID uuid.UUID) ([]FindOrgUserByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, findOrgUserByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindOrgUserByUserIDRow
	for rows.Next() {
		var i FindOrgUserByUserIDRow
		if err := rows.Scan(
			&i.OrganizationUser.OrganizationUserID,
			&i.OrganizationUser.UserID,
			&i.OrganizationUser.OrganizationID,
			&i.OrganizationUser.Role,
			&i.OrganizationUser.CreatedAt,
			&i.OrganizationUser.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
