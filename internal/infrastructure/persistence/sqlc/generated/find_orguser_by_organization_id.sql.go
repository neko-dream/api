// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: find_orguser_by_organization_id.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const findOrgUserByOrganizationID = `-- name: FindOrgUserByOrganizationID :many
SELECT
    organization_users.organization_user_id, organization_users.user_id, organization_users.organization_id, organization_users.created_at, organization_users.updated_at, organization_users.role
FROM organization_users
WHERE organization_id = $1
`

type FindOrgUserByOrganizationIDRow struct {
	OrganizationUser OrganizationUser
}

// FindOrgUserByOrganizationID
//
//	SELECT
//	    organization_users.organization_user_id, organization_users.user_id, organization_users.organization_id, organization_users.created_at, organization_users.updated_at, organization_users.role
//	FROM organization_users
//	WHERE organization_id = $1
func (q *Queries) FindOrgUserByOrganizationID(ctx context.Context, organizationID uuid.UUID) ([]FindOrgUserByOrganizationIDRow, error) {
	rows, err := q.db.QueryContext(ctx, findOrgUserByOrganizationID, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindOrgUserByOrganizationIDRow
	for rows.Next() {
		var i FindOrgUserByOrganizationIDRow
		if err := rows.Scan(
			&i.OrganizationUser.OrganizationUserID,
			&i.OrganizationUser.UserID,
			&i.OrganizationUser.OrganizationID,
			&i.OrganizationUser.CreatedAt,
			&i.OrganizationUser.UpdatedAt,
			&i.OrganizationUser.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
