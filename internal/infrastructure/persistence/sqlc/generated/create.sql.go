// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: create.sql

package model

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/neko-dream/api/internal/domain/model/talksession"
)

const createPolicy = `-- name: CreatePolicy :exec
INSERT INTO policy_versions (
    version,
    created_at
) VALUES ($1, $2)
`

type CreatePolicyParams struct {
	Version   string
	CreatedAt time.Time
}

// CreatePolicy
//
//	INSERT INTO policy_versions (
//	    version,
//	    created_at
//	) VALUES ($1, $2)
func (q *Queries) CreatePolicy(ctx context.Context, arg CreatePolicyParams) error {
	_, err := q.db.ExecContext(ctx, createPolicy, arg.Version, arg.CreatedAt)
	return err
}

const createPolicyConsent = `-- name: CreatePolicyConsent :exec
INSERT INTO policy_consents (
    policy_consent_id,
    user_id,
    policy_version,
    consented_at,
    ip_address,
    user_agent
) VALUES ($1, $2, $3, $4, $5, $6)
`

type CreatePolicyConsentParams struct {
	PolicyConsentID uuid.UUID
	UserID          uuid.UUID
	PolicyVersion   string
	ConsentedAt     time.Time
	IpAddress       string
	UserAgent       string
}

// CreatePolicyConsent
//
//	INSERT INTO policy_consents (
//	    policy_consent_id,
//	    user_id,
//	    policy_version,
//	    consented_at,
//	    ip_address,
//	    user_agent
//	) VALUES ($1, $2, $3, $4, $5, $6)
func (q *Queries) CreatePolicyConsent(ctx context.Context, arg CreatePolicyConsentParams) error {
	_, err := q.db.ExecContext(ctx, createPolicyConsent,
		arg.PolicyConsentID,
		arg.UserID,
		arg.PolicyVersion,
		arg.ConsentedAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	return err
}

const createTSConsent = `-- name: CreateTSConsent :exec
INSERT INTO talksession_consents (
    talksession_id,
    user_id,
    consented_at,
    restrictions
) VALUES (
    $1,
    $2,
    $3,
    $4
)
`

type CreateTSConsentParams struct {
	TalksessionID uuid.UUID
	UserID        uuid.UUID
	ConsentedAt   time.Time
	Restrictions  talksession.Restrictions
}

// CreateTSConsent
//
//	INSERT INTO talksession_consents (
//	    talksession_id,
//	    user_id,
//	    consented_at,
//	    restrictions
//	) VALUES (
//	    $1,
//	    $2,
//	    $3,
//	    $4
//	)
func (q *Queries) CreateTSConsent(ctx context.Context, arg CreateTSConsentParams) error {
	_, err := q.db.ExecContext(ctx, createTSConsent,
		arg.TalksessionID,
		arg.UserID,
		arg.ConsentedAt,
		arg.Restrictions,
	)
	return err
}

const createUserImage = `-- name: CreateUserImage :exec
INSERT INTO user_images (
    user_images_id,
    user_id,
    key,
    width,
    height,
    extension,
    archived,
    url
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateUserImageParams struct {
	UserImagesID uuid.UUID
	UserID       uuid.UUID
	Key          string
	Width        int32
	Height       int32
	Extension    string
	Archived     bool
	Url          string
}

// CreateUserImage
//
//	INSERT INTO user_images (
//	    user_images_id,
//	    user_id,
//	    key,
//	    width,
//	    height,
//	    extension,
//	    archived,
//	    url
//	) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
func (q *Queries) CreateUserImage(ctx context.Context, arg CreateUserImageParams) error {
	_, err := q.db.ExecContext(ctx, createUserImage,
		arg.UserImagesID,
		arg.UserID,
		arg.Key,
		arg.Width,
		arg.Height,
		arg.Extension,
		arg.Archived,
		arg.Url,
	)
	return err
}
