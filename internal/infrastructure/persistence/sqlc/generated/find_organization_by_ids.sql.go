// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: find_organization_by_ids.sql

package model

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const findOrganizationsByIDs = `-- name: FindOrganizationsByIDs :many
SELECT
    organizations.organization_id, organizations.organization_type, organizations.name, organizations.owner_id, organizations.code
FROM organizations
WHERE organization_id = ANY($1::uuid[])
`

type FindOrganizationsByIDsRow struct {
	Organization Organization
}

// FindOrganizationsByIDs
//
//	SELECT
//	    organizations.organization_id, organizations.organization_type, organizations.name, organizations.owner_id, organizations.code
//	FROM organizations
//	WHERE organization_id = ANY($1::uuid[])
func (q *Queries) FindOrganizationsByIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]FindOrganizationsByIDsRow, error) {
	rows, err := q.db.QueryContext(ctx, findOrganizationsByIDs, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindOrganizationsByIDsRow
	for rows.Next() {
		var i FindOrganizationsByIDsRow
		if err := rows.Scan(
			&i.Organization.OrganizationID,
			&i.Organization.OrganizationType,
			&i.Organization.Name,
			&i.Organization.OwnerID,
			&i.Organization.Code,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
