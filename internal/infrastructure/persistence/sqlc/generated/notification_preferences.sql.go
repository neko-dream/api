// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: notification_preferences.sql

package model

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createNotificationPreference = `-- name: CreateNotificationPreference :one
INSERT INTO notification_preferences (
    user_id,
    push_notification_enabled
) VALUES (
    $1, $2
) RETURNING id, user_id, push_notification_enabled, created_at, updated_at
`

type CreateNotificationPreferenceParams struct {
	UserID                  uuid.UUID
	PushNotificationEnabled bool
}

// CreateNotificationPreference
//
//	INSERT INTO notification_preferences (
//	    user_id,
//	    push_notification_enabled
//	) VALUES (
//	    $1, $2
//	) RETURNING id, user_id, push_notification_enabled, created_at, updated_at
func (q *Queries) CreateNotificationPreference(ctx context.Context, arg CreateNotificationPreferenceParams) (NotificationPreference, error) {
	row := q.db.QueryRowContext(ctx, createNotificationPreference, arg.UserID, arg.PushNotificationEnabled)
	var i NotificationPreference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PushNotificationEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNotificationPreference = `-- name: GetNotificationPreference :one
SELECT id, user_id, push_notification_enabled, created_at, updated_at FROM notification_preferences
WHERE user_id = $1
`

// GetNotificationPreference
//
//	SELECT id, user_id, push_notification_enabled, created_at, updated_at FROM notification_preferences
//	WHERE user_id = $1
func (q *Queries) GetNotificationPreference(ctx context.Context, userID uuid.UUID) (NotificationPreference, error) {
	row := q.db.QueryRowContext(ctx, getNotificationPreference, userID)
	var i NotificationPreference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PushNotificationEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNotificationPreferencesByUserIDs = `-- name: GetNotificationPreferencesByUserIDs :many
SELECT id, user_id, push_notification_enabled, created_at, updated_at FROM notification_preferences
WHERE user_id = ANY($1::uuid[])
`

// GetNotificationPreferencesByUserIDs
//
//	SELECT id, user_id, push_notification_enabled, created_at, updated_at FROM notification_preferences
//	WHERE user_id = ANY($1::uuid[])
func (q *Queries) GetNotificationPreferencesByUserIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]NotificationPreference, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationPreferencesByUserIDs, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NotificationPreference
	for rows.Next() {
		var i NotificationPreference
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PushNotificationEnabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotificationPreference = `-- name: UpdateNotificationPreference :one
UPDATE notification_preferences SET
    push_notification_enabled = $2
WHERE user_id = $1
RETURNING id, user_id, push_notification_enabled, created_at, updated_at
`

type UpdateNotificationPreferenceParams struct {
	UserID                  uuid.UUID
	PushNotificationEnabled bool
}

// UpdateNotificationPreference
//
//	UPDATE notification_preferences SET
//	    push_notification_enabled = $2
//	WHERE user_id = $1
//	RETURNING id, user_id, push_notification_enabled, created_at, updated_at
func (q *Queries) UpdateNotificationPreference(ctx context.Context, arg UpdateNotificationPreferenceParams) (NotificationPreference, error) {
	row := q.db.QueryRowContext(ctx, updateNotificationPreference, arg.UserID, arg.PushNotificationEnabled)
	var i NotificationPreference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PushNotificationEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertNotificationPreference = `-- name: UpsertNotificationPreference :one
INSERT INTO notification_preferences (
    user_id,
    push_notification_enabled
) VALUES (
    $1, $2
) ON CONFLICT (user_id) DO UPDATE SET
    push_notification_enabled = EXCLUDED.push_notification_enabled
RETURNING id, user_id, push_notification_enabled, created_at, updated_at
`

type UpsertNotificationPreferenceParams struct {
	UserID                  uuid.UUID
	PushNotificationEnabled bool
}

// UpsertNotificationPreference
//
//	INSERT INTO notification_preferences (
//	    user_id,
//	    push_notification_enabled
//	) VALUES (
//	    $1, $2
//	) ON CONFLICT (user_id) DO UPDATE SET
//	    push_notification_enabled = EXCLUDED.push_notification_enabled
//	RETURNING id, user_id, push_notification_enabled, created_at, updated_at
func (q *Queries) UpsertNotificationPreference(ctx context.Context, arg UpsertNotificationPreferenceParams) (NotificationPreference, error) {
	row := q.db.QueryRowContext(ctx, upsertNotificationPreference, arg.UserID, arg.PushNotificationEnabled)
	var i NotificationPreference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PushNotificationEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
