// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: find_by_opinion.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const findReportByOpinionID = `-- name: FindReportByOpinionID :many
SELECT
    opinion_reports.opinion_report_id, opinion_reports.opinion_id, opinion_reports.talk_session_id, opinion_reports.reporter_id, opinion_reports.reason, opinion_reports.status, opinion_reports.created_at, opinion_reports.updated_at, opinion_reports.reason_text
FROM
    opinion_reports
WHERE
    opinion_id = $1::uuid
`

type FindReportByOpinionIDRow struct {
	OpinionReport OpinionReport
}

// FindReportByOpinionID
//
//	SELECT
//	    opinion_reports.opinion_report_id, opinion_reports.opinion_id, opinion_reports.talk_session_id, opinion_reports.reporter_id, opinion_reports.reason, opinion_reports.status, opinion_reports.created_at, opinion_reports.updated_at, opinion_reports.reason_text
//	FROM
//	    opinion_reports
//	WHERE
//	    opinion_id = $1::uuid
func (q *Queries) FindReportByOpinionID(ctx context.Context, opinionID uuid.NullUUID) ([]FindReportByOpinionIDRow, error) {
	rows, err := q.db.QueryContext(ctx, findReportByOpinionID, opinionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindReportByOpinionIDRow
	for rows.Next() {
		var i FindReportByOpinionIDRow
		if err := rows.Scan(
			&i.OpinionReport.OpinionReportID,
			&i.OpinionReport.OpinionID,
			&i.OpinionReport.TalkSessionID,
			&i.OpinionReport.ReporterID,
			&i.OpinionReport.Reason,
			&i.OpinionReport.Status,
			&i.OpinionReport.CreatedAt,
			&i.OpinionReport.UpdatedAt,
			&i.OpinionReport.ReasonText,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
