// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: find_organization_users_with_details.sql

package model

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const findOrganizationUsersWithDetails = `-- name: FindOrganizationUsersWithDetails :many
SELECT
    ou.user_id,
    ou.role,
    u.display_id,
    u.display_name,
    u.icon_url
FROM organization_users ou
INNER JOIN users u ON ou.user_id = u.user_id
WHERE ou.organization_id = $1
ORDER BY ou.role ASC, u.display_name ASC
`

type FindOrganizationUsersWithDetailsRow struct {
	UserID      uuid.UUID
	Role        int32
	DisplayID   sql.NullString
	DisplayName sql.NullString
	IconUrl     sql.NullString
}

// FindOrganizationUsersWithDetails
//
//	SELECT
//	    ou.user_id,
//	    ou.role,
//	    u.display_id,
//	    u.display_name,
//	    u.icon_url
//	FROM organization_users ou
//	INNER JOIN users u ON ou.user_id = u.user_id
//	WHERE ou.organization_id = $1
//	ORDER BY ou.role ASC, u.display_name ASC
func (q *Queries) FindOrganizationUsersWithDetails(ctx context.Context, organizationID uuid.UUID) ([]FindOrganizationUsersWithDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, findOrganizationUsersWithDetails, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindOrganizationUsersWithDetailsRow
	for rows.Next() {
		var i FindOrganizationUsersWithDetailsRow
		if err := rows.Scan(
			&i.UserID,
			&i.Role,
			&i.DisplayID,
			&i.DisplayName,
			&i.IconUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
