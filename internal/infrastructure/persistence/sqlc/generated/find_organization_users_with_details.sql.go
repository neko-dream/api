// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: find_organization_users_with_details.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const findOrganizationUsersWithDetails = `-- name: FindOrganizationUsersWithDetails :many
SELECT
    ou.organization_user_id, ou.user_id, ou.organization_id, ou.created_at, ou.updated_at, ou.role,
    u.user_id, u.display_id, u.display_name, u.icon_url, u.created_at, u.updated_at, u.email, u.email_verified, u.withdrawal_date,
    o.organization_id, o.organization_type, o.name, o.owner_id, o.code, o.icon_url
FROM organizations o
LEFT JOIN organization_users ou ON o.organization_id = ou.organization_id
LEFT JOIN users u ON ou.user_id = u.user_id
WHERE o.organization_id = $1
AND u.withdrawal_date IS NULL
ORDER BY ou.role ASC, u.user_id ASC
`

type FindOrganizationUsersWithDetailsRow struct {
	OrganizationUser OrganizationUser
	User             User
	Organization     Organization
}

// 退会ユーザーは表示しない
//
//	SELECT
//	    ou.organization_user_id, ou.user_id, ou.organization_id, ou.created_at, ou.updated_at, ou.role,
//	    u.user_id, u.display_id, u.display_name, u.icon_url, u.created_at, u.updated_at, u.email, u.email_verified, u.withdrawal_date,
//	    o.organization_id, o.organization_type, o.name, o.owner_id, o.code, o.icon_url
//	FROM organizations o
//	LEFT JOIN organization_users ou ON o.organization_id = ou.organization_id
//	LEFT JOIN users u ON ou.user_id = u.user_id
//	WHERE o.organization_id = $1
//	AND u.withdrawal_date IS NULL
//	ORDER BY ou.role ASC, u.user_id ASC
func (q *Queries) FindOrganizationUsersWithDetails(ctx context.Context, organizationID uuid.UUID) ([]FindOrganizationUsersWithDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, findOrganizationUsersWithDetails, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindOrganizationUsersWithDetailsRow
	for rows.Next() {
		var i FindOrganizationUsersWithDetailsRow
		if err := rows.Scan(
			&i.OrganizationUser.OrganizationUserID,
			&i.OrganizationUser.UserID,
			&i.OrganizationUser.OrganizationID,
			&i.OrganizationUser.CreatedAt,
			&i.OrganizationUser.UpdatedAt,
			&i.OrganizationUser.Role,
			&i.User.UserID,
			&i.User.DisplayID,
			&i.User.DisplayName,
			&i.User.IconUrl,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.User.Email,
			&i.User.EmailVerified,
			&i.User.WithdrawalDate,
			&i.Organization.OrganizationID,
			&i.Organization.OrganizationType,
			&i.Organization.Name,
			&i.Organization.OwnerID,
			&i.Organization.Code,
			&i.Organization.IconUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
