// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth_states.sql

package model

import (
	"context"
	"time"
)

const createAuthState = `-- name: CreateAuthState :one
INSERT INTO auth_states (
    state,
    provider,
    expires_at
) VALUES (
    $1,
    $2,
    $3
) RETURNING id, state, provider, created_at, expires_at
`

type CreateAuthStateParams struct {
	State     string
	Provider  string
	ExpiresAt time.Time
}

// CreateAuthState
//
//	INSERT INTO auth_states (
//	    state,
//	    provider,
//	    expires_at
//	) VALUES (
//	    $1,
//	    $2,
//	    $3
//	) RETURNING id, state, provider, created_at, expires_at
func (q *Queries) CreateAuthState(ctx context.Context, arg CreateAuthStateParams) (AuthState, error) {
	row := q.db.QueryRowContext(ctx, createAuthState, arg.State, arg.Provider, arg.ExpiresAt)
	var i AuthState
	err := row.Scan(
		&i.ID,
		&i.State,
		&i.Provider,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteAuthState = `-- name: DeleteAuthState :exec
DELETE FROM auth_states
WHERE state = $1
`

// DeleteAuthState
//
//	DELETE FROM auth_states
//	WHERE state = $1
func (q *Queries) DeleteAuthState(ctx context.Context, state string) error {
	_, err := q.db.ExecContext(ctx, deleteAuthState, state)
	return err
}

const deleteExpiredAuthStates = `-- name: DeleteExpiredAuthStates :exec
DELETE FROM auth_states
WHERE expires_at <= CURRENT_TIMESTAMP
`

// DeleteExpiredAuthStates
//
//	DELETE FROM auth_states
//	WHERE expires_at <= CURRENT_TIMESTAMP
func (q *Queries) DeleteExpiredAuthStates(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredAuthStates)
	return err
}

const getAuthState = `-- name: GetAuthState :one
SELECT id, state, provider, created_at, expires_at FROM auth_states
WHERE state = $1 AND expires_at > CURRENT_TIMESTAMP
LIMIT 1
`

// GetAuthState
//
//	SELECT id, state, provider, created_at, expires_at FROM auth_states
//	WHERE state = $1 AND expires_at > CURRENT_TIMESTAMP
//	LIMIT 1
func (q *Queries) GetAuthState(ctx context.Context, state string) (AuthState, error) {
	row := q.db.QueryRowContext(ctx, getAuthState, state)
	var i AuthState
	err := row.Scan(
		&i.ID,
		&i.State,
		&i.Provider,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
