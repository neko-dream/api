// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: find_orguser_by_organization_id_and_user_id.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const findOrgUserByOrganizationIDAndUserID = `-- name: FindOrgUserByOrganizationIDAndUserID :one
SELECT
    organization_users.organization_user_id, organization_users.user_id, organization_users.organization_id, organization_users.created_at, organization_users.updated_at, organization_users.role
FROM organization_users
WHERE organization_id = $1
  AND user_id = $2
`

type FindOrgUserByOrganizationIDAndUserIDParams struct {
	OrganizationID uuid.UUID
	UserID         uuid.UUID
}

type FindOrgUserByOrganizationIDAndUserIDRow struct {
	OrganizationUser OrganizationUser
}

// FindOrgUserByOrganizationIDAndUserID
//
//	SELECT
//	    organization_users.organization_user_id, organization_users.user_id, organization_users.organization_id, organization_users.created_at, organization_users.updated_at, organization_users.role
//	FROM organization_users
//	WHERE organization_id = $1
//	  AND user_id = $2
func (q *Queries) FindOrgUserByOrganizationIDAndUserID(ctx context.Context, arg FindOrgUserByOrganizationIDAndUserIDParams) (FindOrgUserByOrganizationIDAndUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, findOrgUserByOrganizationIDAndUserID, arg.OrganizationID, arg.UserID)
	var i FindOrgUserByOrganizationIDAndUserIDRow
	err := row.Scan(
		&i.OrganizationUser.OrganizationUserID,
		&i.OrganizationUser.UserID,
		&i.OrganizationUser.OrganizationID,
		&i.OrganizationUser.CreatedAt,
		&i.OrganizationUser.UpdatedAt,
		&i.OrganizationUser.Role,
	)
	return i, err
}
