// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package model

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (session_id, user_id, provider, session_status, created_at, expires_at, last_activity_at) VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateSessionParams struct {
	SessionID      uuid.UUID
	UserID         uuid.UUID
	Provider       string
	SessionStatus  int32
	CreatedAt      time.Time
	ExpiresAt      time.Time
	LastActivityAt time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession,
		arg.SessionID,
		arg.UserID,
		arg.Provider,
		arg.SessionStatus,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.LastActivityAt,
	)
	return err
}

const findActiveSessionsByUserID = `-- name: FindActiveSessionsByUserID :many
SELECT session_id, user_id, provider, session_status, expires_at, created_at, last_activity_at
FROM sessions
    WHERE user_id = $1
    AND session_status = 0
`

func (q *Queries) FindActiveSessionsByUserID(ctx context.Context, userID uuid.UUID) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, findActiveSessionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.SessionID,
			&i.UserID,
			&i.Provider,
			&i.SessionStatus,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.LastActivityAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
