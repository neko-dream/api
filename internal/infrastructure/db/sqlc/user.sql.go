// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package model

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (user_id, display_id, display_name, created_at, picture) VALUES ($1, $2, $3, $4, $5)
`

type CreateUserParams struct {
	UserID      uuid.UUID
	DisplayID   string
	DisplayName string
	CreatedAt   time.Time
	Picture     sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.UserID,
		arg.DisplayID,
		arg.DisplayName,
		arg.CreatedAt,
		arg.Picture,
	)
	return err
}

const createUserAuth = `-- name: CreateUserAuth :exec
INSERT INTO user_auths (user_id, provider, subject, created_at) VALUES ($1, $2, $3, $4)
`

type CreateUserAuthParams struct {
	UserID    uuid.NullUUID
	Provider  string
	Subject   string
	CreatedAt time.Time
}

func (q *Queries) CreateUserAuth(ctx context.Context, arg CreateUserAuthParams) error {
	_, err := q.db.ExecContext(ctx, createUserAuth,
		arg.UserID,
		arg.Provider,
		arg.Subject,
		arg.CreatedAt,
	)
	return err
}

const getUserBySubject = `-- name: GetUserBySubject :one
SELECT
    users.user_id,
    users.display_id,
    users.display_name,
    user_auths.provider,
    user_auths.subject,
    user_auths.created_at,
    users.picture
FROM
    users
    JOIN user_auths ON users.user_id = user_auths.user_id
WHERE
    user_auths.subject = $1
`

type GetUserBySubjectRow struct {
	UserID      uuid.UUID
	DisplayID   string
	DisplayName string
	Provider    string
	Subject     string
	CreatedAt   time.Time
	Picture     sql.NullString
}

func (q *Queries) GetUserBySubject(ctx context.Context, subject string) (GetUserBySubjectRow, error) {
	row := q.db.QueryRowContext(ctx, getUserBySubject, subject)
	var i GetUserBySubjectRow
	err := row.Scan(
		&i.UserID,
		&i.DisplayID,
		&i.DisplayName,
		&i.Provider,
		&i.Subject,
		&i.CreatedAt,
		&i.Picture,
	)
	return i, err
}
