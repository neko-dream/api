// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: vote.sql

package model

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createVote = `-- name: CreateVote :exec
INSERT INTO votes (
    vote_id,
    opinion_id,
    talk_session_id,
    user_id,
    vote_type,
    created_at
) VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateVoteParams struct {
	VoteID        uuid.UUID
	OpinionID     uuid.UUID
	TalkSessionID uuid.UUID
	UserID        uuid.UUID
	VoteType      int16
	CreatedAt     time.Time
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) error {
	_, err := q.db.ExecContext(ctx, createVote,
		arg.VoteID,
		arg.OpinionID,
		arg.TalkSessionID,
		arg.UserID,
		arg.VoteType,
		arg.CreatedAt,
	)
	return err
}

const findVoteByUserIDAndOpinionID = `-- name: FindVoteByUserIDAndOpinionID :one
SELECT vote_id, opinion_id, user_id, vote_type, created_at, talk_session_id FROM votes WHERE user_id = $1 AND opinion_id = $2
`

type FindVoteByUserIDAndOpinionIDParams struct {
	UserID    uuid.UUID
	OpinionID uuid.UUID
}

func (q *Queries) FindVoteByUserIDAndOpinionID(ctx context.Context, arg FindVoteByUserIDAndOpinionIDParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, findVoteByUserIDAndOpinionID, arg.UserID, arg.OpinionID)
	var i Vote
	err := row.Scan(
		&i.VoteID,
		&i.OpinionID,
		&i.UserID,
		&i.VoteType,
		&i.CreatedAt,
		&i.TalkSessionID,
	)
	return i, err
}
