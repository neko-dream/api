// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: vote.sql

package model

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createVote = `-- name: CreateVote :exec
INSERT INTO votes (
    vote_id,
    opinion_id,
    user_id,
    vote_type,
    created_at
) VALUES ($1, $2, $3, $4, $5)
`

type CreateVoteParams struct {
	VoteID    uuid.UUID
	OpinionID uuid.UUID
	UserID    uuid.UUID
	VoteType  int16
	CreatedAt time.Time
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) error {
	_, err := q.db.ExecContext(ctx, createVote,
		arg.VoteID,
		arg.OpinionID,
		arg.UserID,
		arg.VoteType,
		arg.CreatedAt,
	)
	return err
}

const getVoteByUserIDAndOpinionID = `-- name: GetVoteByUserIDAndOpinionID :one
SELECT
    vote_id,
    opinion_id,
    user_id,
    vote_type,
    created_at
FROM votes
WHERE opinion_id = $1 AND user_id = $2
LIMIT 1
`

type GetVoteByUserIDAndOpinionIDParams struct {
	OpinionID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) GetVoteByUserIDAndOpinionID(ctx context.Context, arg GetVoteByUserIDAndOpinionIDParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, getVoteByUserIDAndOpinionID, arg.OpinionID, arg.UserID)
	var i Vote
	err := row.Scan(
		&i.VoteID,
		&i.OpinionID,
		&i.UserID,
		&i.VoteType,
		&i.CreatedAt,
	)
	return i, err
}
