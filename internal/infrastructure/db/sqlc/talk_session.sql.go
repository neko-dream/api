// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: talk_session.sql

package model

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTalkSession = `-- name: CreateTalkSession :exec
INSERT INTO talk_sessions (talk_session_id, theme, owner_id, scheduled_end_time, created_at) VALUES ($1, $2, $3, $4, $5)
`

type CreateTalkSessionParams struct {
	TalkSessionID    uuid.UUID
	Theme            string
	OwnerID          uuid.UUID
	ScheduledEndTime time.Time
	CreatedAt        time.Time
}

func (q *Queries) CreateTalkSession(ctx context.Context, arg CreateTalkSessionParams) error {
	_, err := q.db.ExecContext(ctx, createTalkSession,
		arg.TalkSessionID,
		arg.Theme,
		arg.OwnerID,
		arg.ScheduledEndTime,
		arg.CreatedAt,
	)
	return err
}

const createTalkSessionLocation = `-- name: CreateTalkSessionLocation :exec
INSERT INTO talk_session_locations (talk_session_id, location, city, prefecture) VALUES ($1, ST_GeographyFromText($2), $3, $4)
`

type CreateTalkSessionLocationParams struct {
	TalkSessionID       uuid.UUID
	StGeographyfromtext interface{}
	City                string
	Prefecture          string
}

func (q *Queries) CreateTalkSessionLocation(ctx context.Context, arg CreateTalkSessionLocationParams) error {
	_, err := q.db.ExecContext(ctx, createTalkSessionLocation,
		arg.TalkSessionID,
		arg.StGeographyfromtext,
		arg.City,
		arg.Prefecture,
	)
	return err
}

const editTalkSession = `-- name: EditTalkSession :exec
UPDATE talk_sessions
    SET theme = $2,
        finished_at = $3,
        scheduled_end_time = $4
    WHERE talk_session_id = $1
`

type EditTalkSessionParams struct {
	TalkSessionID    uuid.UUID
	Theme            string
	FinishedAt       sql.NullTime
	ScheduledEndTime time.Time
}

func (q *Queries) EditTalkSession(ctx context.Context, arg EditTalkSessionParams) error {
	_, err := q.db.ExecContext(ctx, editTalkSession,
		arg.TalkSessionID,
		arg.Theme,
		arg.FinishedAt,
		arg.ScheduledEndTime,
	)
	return err
}

const getTalkSessionByID = `-- name: GetTalkSessionByID :one
SELECT talk_session_id, owner_id, theme, scheduled_end_time, finished_at, created_at FROM talk_sessions WHERE talk_session_id = $1
`

func (q *Queries) GetTalkSessionByID(ctx context.Context, talkSessionID uuid.UUID) (TalkSession, error) {
	row := q.db.QueryRowContext(ctx, getTalkSessionByID, talkSessionID)
	var i TalkSession
	err := row.Scan(
		&i.TalkSessionID,
		&i.OwnerID,
		&i.Theme,
		&i.ScheduledEndTime,
		&i.FinishedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listTalkSessions = `-- name: ListTalkSessions :many
SELECT
    talk_sessions.talk_session_id,
    talk_sessions.theme,
    talk_sessions.finished_at,
    talk_sessions.created_at,
    talk_sessions.scheduled_end_time,
    COALESCE(oc.opinion_count, 0) AS opinion_count,
    users.display_name AS display_name,
    users.display_id AS display_id,
    users.icon_url AS icon_url,
    ST_Y(ST_GeomFromWKB(ST_AsBinary(talk_session_locations.location))) AS latitude,
    ST_X(ST_GeomFromWKB(ST_AsBinary(talk_session_locations.location))) AS longitude,
    talk_session_locations.city AS city,
    talk_session_locations.prefecture AS prefecture
FROM talk_sessions
LEFT JOIN (
    SELECT talk_session_id, COUNT(opinion_id) AS opinion_count
    FROM opinions
    GROUP BY talk_session_id
) oc ON talk_sessions.talk_session_id = oc.talk_session_id
LEFT JOIN users
    ON talk_sessions.owner_id = users.user_id
LEFT JOIN talk_session_locations
    ON talk_sessions.talk_session_id = talk_session_locations.talk_session_id
WHERE
    CASE
        WHEN $3::text = 'finished' THEN finished_at IS NOT NULL
        WHEN $3::text = 'open' THEN finished_at IS NULL AND scheduled_end_time > now()
        ELSE TRUE
    END
    AND
    (CASE
        WHEN $4::text IS NOT NULL
        THEN talk_sessions.theme LIKE '%' || $4::text || '%'
        ELSE TRUE
    END)
ORDER BY
    CASE
        WHEN $3::text = 'finished' THEN finished_at IS NOT NULL
        WHEN $3::text = 'open' THEN scheduled_end_time > now()
        ELSE TRUE
    END DESC
LIMIT $1 OFFSET $2
`

type ListTalkSessionsParams struct {
	Limit  int32
	Offset int32
	Status sql.NullString
	Theme  sql.NullString
}

type ListTalkSessionsRow struct {
	TalkSessionID    uuid.UUID
	Theme            string
	FinishedAt       sql.NullTime
	CreatedAt        time.Time
	ScheduledEndTime time.Time
	OpinionCount     int64
	DisplayName      sql.NullString
	DisplayID        sql.NullString
	IconUrl          sql.NullString
	Latitude         interface{}
	Longitude        interface{}
	City             sql.NullString
	Prefecture       sql.NullString
}

func (q *Queries) ListTalkSessions(ctx context.Context, arg ListTalkSessionsParams) ([]ListTalkSessionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listTalkSessions,
		arg.Limit,
		arg.Offset,
		arg.Status,
		arg.Theme,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTalkSessionsRow
	for rows.Next() {
		var i ListTalkSessionsRow
		if err := rows.Scan(
			&i.TalkSessionID,
			&i.Theme,
			&i.FinishedAt,
			&i.CreatedAt,
			&i.ScheduledEndTime,
			&i.OpinionCount,
			&i.DisplayName,
			&i.DisplayID,
			&i.IconUrl,
			&i.Latitude,
			&i.Longitude,
			&i.City,
			&i.Prefecture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTalkSessionLocation = `-- name: UpdateTalkSessionLocation :exec
UPDATE talk_session_locations SET location = ST_GeographyFromText($2), city = $3, prefecture = $4 WHERE talk_session_id = $1
`

type UpdateTalkSessionLocationParams struct {
	TalkSessionID       uuid.UUID
	StGeographyfromtext interface{}
	City                string
	Prefecture          string
}

func (q *Queries) UpdateTalkSessionLocation(ctx context.Context, arg UpdateTalkSessionLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateTalkSessionLocation,
		arg.TalkSessionID,
		arg.StGeographyfromtext,
		arg.City,
		arg.Prefecture,
	)
	return err
}
