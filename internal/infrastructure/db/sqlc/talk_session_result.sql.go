// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: talk_session_result.sql

package model

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createActionItem = `-- name: CreateActionItem :exec
INSERT INTO action_items (
    action_item_id,
    talk_session_id,
    sequence,
    content,
    status,
    created_at,
    updated_at
) VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateActionItemParams struct {
	ActionItemID  uuid.UUID
	TalkSessionID uuid.UUID
	Sequence      int32
	Content       string
	Status        string
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) CreateActionItem(ctx context.Context, arg CreateActionItemParams) error {
	_, err := q.db.ExecContext(ctx, createActionItem,
		arg.ActionItemID,
		arg.TalkSessionID,
		arg.Sequence,
		arg.Content,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createTalkSessionConclusion = `-- name: CreateTalkSessionConclusion :exec
INSERT INTO talk_session_conclusions (
    talk_session_id,
    content,
    created_by
) VALUES ($1, $2, $3)
`

type CreateTalkSessionConclusionParams struct {
	TalkSessionID uuid.UUID
	Content       string
	CreatedBy     uuid.UUID
}

func (q *Queries) CreateTalkSessionConclusion(ctx context.Context, arg CreateTalkSessionConclusionParams) error {
	_, err := q.db.ExecContext(ctx, createTalkSessionConclusion, arg.TalkSessionID, arg.Content, arg.CreatedBy)
	return err
}

const getActionItemByID = `-- name: GetActionItemByID :one
SELECT
    action_items.action_item_id,
    action_items.talk_session_id,
    action_items.sequence,
    action_items.content,
    action_items.status,
    action_items.created_at,
    action_items.updated_at,
    users.display_name AS display_name,
    users.display_id AS display_id,
    users.icon_url AS icon_url
FROM action_items
LEFT JOIN users
    ON action_items.created_by = users.user_id
WHERE action_item_id = $1
ORDER BY action_items.sequence
`

type GetActionItemByIDRow struct {
	ActionItemID  uuid.UUID
	TalkSessionID uuid.UUID
	Sequence      int32
	Content       string
	Status        string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	DisplayName   sql.NullString
	DisplayID     sql.NullString
	IconUrl       sql.NullString
}

func (q *Queries) GetActionItemByID(ctx context.Context, actionItemID uuid.UUID) (GetActionItemByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getActionItemByID, actionItemID)
	var i GetActionItemByIDRow
	err := row.Scan(
		&i.ActionItemID,
		&i.TalkSessionID,
		&i.Sequence,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DisplayName,
		&i.DisplayID,
		&i.IconUrl,
	)
	return i, err
}

const getActionItemsByTalkSessionID = `-- name: GetActionItemsByTalkSessionID :many
SELECT
    action_items.action_item_id,
    action_items.talk_session_id,
    action_items.sequence,
    action_items.content,
    action_items.status,
    action_items.created_at,
    action_items.updated_at,
    users.display_name AS display_name,
    users.display_id AS display,
    users.icon_url AS icon_url
FROM action_items
LEFT JOIN talk_sessions
    ON talk_sessions.talk_session_id = action_items.talk_session_id
LEFT JOIN users
    ON talk_sessions.owner_id = users.user_id
WHERE action_items.talk_session_id = $1
ORDER BY action_items.sequence
`

type GetActionItemsByTalkSessionIDRow struct {
	ActionItemID  uuid.UUID
	TalkSessionID uuid.UUID
	Sequence      int32
	Content       string
	Status        string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	DisplayName   sql.NullString
	Display       sql.NullString
	IconUrl       sql.NullString
}

func (q *Queries) GetActionItemsByTalkSessionID(ctx context.Context, talkSessionID uuid.UUID) ([]GetActionItemsByTalkSessionIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getActionItemsByTalkSessionID, talkSessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActionItemsByTalkSessionIDRow
	for rows.Next() {
		var i GetActionItemsByTalkSessionIDRow
		if err := rows.Scan(
			&i.ActionItemID,
			&i.TalkSessionID,
			&i.Sequence,
			&i.Content,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DisplayName,
			&i.Display,
			&i.IconUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTalkSessionConclusionByID = `-- name: GetTalkSessionConclusionByID :one
SELECT
    talk_session_conclusions.talk_session_id,
    talk_session_conclusions.content,
    talk_session_conclusions.created_by,
    talk_session_conclusions.created_at,
    talk_session_conclusions.updated_at,
    users.user_id AS user_id,
    users.display_name AS display_name,
    users.display_id AS display_id,
    users.icon_url AS icon_url
FROM talk_session_conclusions
LEFT JOIN users
    ON talk_session_conclusions.created_by = users.user_id
WHERE talk_session_id = $1
`

type GetTalkSessionConclusionByIDRow struct {
	TalkSessionID uuid.UUID
	Content       string
	CreatedBy     uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	UserID        uuid.NullUUID
	DisplayName   sql.NullString
	DisplayID     sql.NullString
	IconUrl       sql.NullString
}

func (q *Queries) GetTalkSessionConclusionByID(ctx context.Context, talkSessionID uuid.UUID) (GetTalkSessionConclusionByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTalkSessionConclusionByID, talkSessionID)
	var i GetTalkSessionConclusionByIDRow
	err := row.Scan(
		&i.TalkSessionID,
		&i.Content,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.DisplayName,
		&i.DisplayID,
		&i.IconUrl,
	)
	return i, err
}

const updateActionItem = `-- name: UpdateActionItem :exec
UPDATE action_items
SET
    content = $2,
    status = $3,
    sequence = $4,
    updated_at = CURRENT_TIMESTAMP
WHERE action_item_id = $1
`

type UpdateActionItemParams struct {
	ActionItemID uuid.UUID
	Content      string
	Status       string
	Sequence     int32
}

func (q *Queries) UpdateActionItem(ctx context.Context, arg UpdateActionItemParams) error {
	_, err := q.db.ExecContext(ctx, updateActionItem,
		arg.ActionItemID,
		arg.Content,
		arg.Status,
		arg.Sequence,
	)
	return err
}

const updateSequencesByActionItemID = `-- name: UpdateSequencesByActionItemID :exec
UPDATE action_items
SET
    sequence = sequence + 1
WHERE talk_session_id = $1
    AND sequence >= $2
`

type UpdateSequencesByActionItemIDParams struct {
	TalkSessionID uuid.UUID
	Sequence      int32
}

// 指定したActionItemいよりSequenceが大きいものをすべて+1する
func (q *Queries) UpdateSequencesByActionItemID(ctx context.Context, arg UpdateSequencesByActionItemIDParams) error {
	_, err := q.db.ExecContext(ctx, updateSequencesByActionItemID, arg.TalkSessionID, arg.Sequence)
	return err
}

const updateTalkSessionConclusion = `-- name: UpdateTalkSessionConclusion :exec
UPDATE talk_session_conclusions
SET
    content = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE talk_session_id = $1
`

type UpdateTalkSessionConclusionParams struct {
	TalkSessionID uuid.UUID
	Content       string
}

func (q *Queries) UpdateTalkSessionConclusion(ctx context.Context, arg UpdateTalkSessionConclusionParams) error {
	_, err := q.db.ExecContext(ctx, updateTalkSessionConclusion, arg.TalkSessionID, arg.Content)
	return err
}
