// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AuthProvider string

const (
	AuthProviderGOOGLE AuthProvider = "GOOGLE"
)

func (e *AuthProvider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthProvider(s)
	case string:
		*e = AuthProvider(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthProvider: %T", src)
	}
	return nil
}

type NullAuthProvider struct {
	AuthProvider AuthProvider
	Valid        bool // Valid is true if AuthProvider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthProvider) Scan(value interface{}) error {
	if value == nil {
		ns.AuthProvider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthProvider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthProvider), nil
}

type SessionStatus string

const (
	SessionStatusACTIVE   SessionStatus = "ACTIVE"
	SessionStatusINACTIVE SessionStatus = "INACTIVE"
)

func (e *SessionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SessionStatus(s)
	case string:
		*e = SessionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SessionStatus: %T", src)
	}
	return nil
}

type NullSessionStatus struct {
	SessionStatus SessionStatus
	Valid         bool // Valid is true if SessionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSessionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SessionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SessionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSessionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SessionStatus), nil
}

type Opinion struct {
	OpinionID       uuid.UUID
	TalkSessionID   uuid.UUID
	UserID          uuid.UUID
	OpinionContent  string
	ParentOpinionID uuid.NullUUID
	VoteID          uuid.NullUUID
	CreatedAt       time.Time
}

type Session struct {
	SessionID     uuid.UUID
	UserID        uuid.NullUUID
	Provider      interface{}
	SessionStatus SessionStatus
	CreatedAt     time.Time
}

type TalkSession struct {
	TalkSessionID uuid.UUID
	Theme         string
	FinishedAt    sql.NullTime
	CreatedAt     time.Time
}

type User struct {
	UserID      uuid.UUID
	DisplayID   string
	DisplayName string
	CreatedAt   time.Time
}

type UserAuth struct {
	UserID    uuid.NullUUID
	Provider  interface{}
	Subject   string
	CreatedAt time.Time
}

type Vote struct {
	VoteID    uuid.UUID
	OpinionID uuid.UUID
	UserID    uuid.UUID
	CreatedAt time.Time
}
