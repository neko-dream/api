<!DOCTYPE html>
<html lang="ja">
  <head>
    <title>管理画面</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://unpkg.com/@tailwindcss/browser@4"></script>

    <!-- FontAwesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Alpine.js for simple interactions -->
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <style>
      [x-cloak] { display: none !important; }
      .animate-pulse-custom {
        animation: pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
      }
      @keyframes pulse {
        0%, 100% {
          opacity: 1;
        }
        50% {
          opacity: 0.7;
        }
      }
    </style>
  </head>
  <body class="bg-gray-50 min-h-screen" x-data="{ showSeedModal: false, currentSessionId: '' }" x-ref="alpineRoot">
    <div class="container mx-auto px-4 py-6">
      <!-- Header section -->
      <header class="bg-white shadow-md rounded-lg p-4 mb-6">
        <div class="flex justify-between items-center">
          <h1 class="text-2xl font-bold text-gray-800 flex items-center">
            <i class="fas fa-comments text-indigo-600 mr-2"></i> セッション一覧
          </h1>
          <div class="flex items-center space-x-2 bg-gray-100 px-3 py-2 rounded-full">
            <i class="fas fa-user text-gray-600"></i>
            <span class="text-gray-700">ログイン中: </span>
            <p id="user" class="font-semibold text-indigo-700"></p>
          </div>
        </div>
      </header>

      <!-- Session list -->
      <div class="grid grid-cols-1 gap-6">
        {{range .Sessions}}
        <div id="task-{{.ID}}" class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
          <div class="p-5 border-b border-gray-200">
            <div class="flex justify-between items-start">
              <h3 class="text-xl font-bold text-gray-800">{{.Theme}}</h3>
              <span
                class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium {{if .HideReport}}bg-red-100 text-red-700{{else}}bg-green-100 text-green-700{{end}}"
                id="report-status-{{.ID}}"
              >
                <i class="{{if .HideReport}}fas fa-eye-slash mr-1{{else}}fas fa-eye mr-1{{end}}"></i>
                レポート: {{if .HideReport}}非表示{{else}}表示{{end}}
              </span>
            </div>
          </div>

          <div class="p-5 bg-gray-50">
            <div class="grid grid-cols-2 gap-3 text-sm text-gray-600">
              <div class="flex items-center">
                <i class="fas fa-fingerprint w-5 text-gray-400"></i>
                <span class="ml-2">セッションID: <span class="font-mono text-xs bg-gray-200 px-2 py-0.5 rounded">{{.ID}}</span></span>
              </div>
              <div class="flex items-center">
                <i class="far fa-calendar-plus w-5 text-gray-400"></i>
                <span class="ml-2">開始日時: {{.CreatedAt}}</span>
              </div>
              <div class="flex items-center">
                <i class="far fa-calendar-check w-5 text-gray-400"></i>
                <span class="ml-2">終了日時: {{.EndTime}}</span>
              </div>
              <div class="flex items-center">
                <i class="far fa-comment-dots w-5 text-gray-400"></i>
                <span class="ml-2">意見数: <span class="font-semibold">{{.OpinionCount}}</span></span>
              </div>
              <div class="flex items-center">
                <i class="fas fa-user w-5 text-gray-400"></i>
                <span class="ml-2" >作成者: <span class="font-semibold">{{.DisplayName}}</span></span>
              </div>
            </div>
          </div>

          <div class="p-4 bg-gray-100 flex flex-wrap gap-2">
            <button
              onclick="generateReport('{{.ID}}')"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200"
            >
              <i class="fas fa-sync-alt mr-2"></i> レポート再生成
            </button>
            <button
              onclick="generateAnalysis('{{.ID}}')"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transition-colors duration-200"
            >
              <i class="fas fa-chart-pie mr-2"></i> 分析再実行
            </button>
            <button
              onclick="toggleHideReport('{{.ID}}', {{if .HideReport}}false{{else}}true{{end}})"
              id="toggle-button-{{.ID}}"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white {{if .HideReport}}bg-green-600 hover:bg-green-700{{else}}bg-red-600 hover:bg-red-700{{end}} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-{{if .HideReport}}green{{else}}red{{end}}-500 transition-colors duration-200"
            >
              <i class="fas {{if .HideReport}}fa-eye mr-2{{else}}fa-eye-slash mr-2{{end}}"></i>
              レポート{{if .HideReport}}表示{{else}}非表示{{end}}
            </button>
            {{if .IsOwner}}
            <button
              @click="showSeedModal = true; currentSessionId='{{.ID}}'"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 transition-colors duration-200"
            >
              <i class="fas fa-seedling mr-2"></i> シード意見投稿
            </button>
            {{end}}
          </div>
        </div>
        {{end}}
      </div>

      <!-- Empty state if no sessions -->
      {{if not .Sessions}}
      <div class="text-center py-12">
        <i class="fas fa-box-open text-gray-300 text-5xl mb-3"></i>
        <p class="text-gray-500 text-xl">セッションがありません</p>
      </div>
      {{end}}
    </div>

    <!-- シード意見投稿用モーダル -->
    <div x-cloak x-show="showSeedModal" class="fixed inset-0 overflow-y-auto z-50 flex items-center justify-center" x-transition:enter="transition ease-out duration-300" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="transition ease-in duration-200" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0"
    >
      <div class="fixed inset-0 bg-black opacity-50 transition-opacity" @click="showSeedModal = false"></div>

      <div class="relative bg-white rounded-lg max-w-lg w-full mx-4 shadow-xl transform transition-all" x-transition:enter="transition ease-out duration-300" x-transition:enter-start="opacity-0 translate-y-4" x-transition:enter-end="opacity-100 translate-y-0" x-transition:leave="transition ease-in duration-200" x-transition:leave-start="opacity-100 translate-y-0" x-transition:leave-end="opacity-0 translate-y-4">
        <div class="flex justify-between items-center px-6 py-4 border-b">
          <h3 class="text-lg font-medium text-gray-900">シード意見の投稿</h3>
          <button type="button" @click="showSeedModal = false" class="text-gray-400 hover:text-gray-600">
            <i class="fas fa-times"></i>
          </button>
        </div>

        <form id="seedOpinionForm" class="p-6">
          <input type="hidden" id="sessionId" name="sessionId" x-model="currentSessionId" />
          <div class="mb-4">
            <label for="opinionContent" class="block text-sm font-medium text-gray-700 mb-1">意見内容 <span class="text-red-600">*</span></label>
            <textarea id="opinionContent" name="opinionContent" rows="4" required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"></textarea>
            <p class="mt-1 text-sm text-gray-500">5〜140文字で入力してください</p>
          </div>

          <div class="mb-4">
            <label for="referenceURL" class="block text-sm font-medium text-gray-700 mb-1">参考URL (任意)</label>
            <input type="url" id="referenceURL" name="referenceURL" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />
          </div>

          <div class="mt-6 flex justify-end space-x-3">
            <button type="button" @click="showSeedModal = false" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              キャンセル
            </button>
            <button type="button" onclick="submitSeedOpinion('{{.ID}}')" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" @click="showSeedModal = false">
              投稿する
            </button>
          </div>
        </form>
      </div>
    </div>

    <script>
        // 通知表示用の関数
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `fixed bottom-4 right-4 px-6 py-3 rounded-md text-white ${type === 'success' ? 'bg-green-600' : 'bg-red-600'} shadow-lg transition-opacity duration-300`;
            notification.innerHTML = `
                <div class="flex items-center">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'} mr-2"></i>
                    <span>${message}</span>
                </div>
            `;
            document.body.appendChild(notification);

            // 3秒後に消す
            setTimeout(() => {
                notification.style.opacity = '0';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        async function getReport(talkSessionID) {
            try {
                const response = await fetch(`/talksessions/${talkSessionID}/report`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });

                const result = await response.json();
                if (!!result.code) {
                    return;
                }
                const report = result.report;
            } catch (error) {
                console.error('Error:', error);
                showNotification('エラーが発生しました', 'error');
            }
        }

        async function generateAnalysis(talkSessionID, event) {
            try {
                const buttonElement = event.target;
                const originalContent = buttonElement.innerHTML;
                buttonElement.disabled = true;
                buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> 処理中...';

                const response = await fetch(`/manage/regenerate`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        type: "group",
                        talkSessionID: talkSessionID,
                    }),
                });

                const result = await response.json();
                showNotification('分析を再実行しました');

                buttonElement.disabled = false;
                buttonElement.innerHTML = originalContent;
            } catch (error) {
                console.error('Error:', error);
                showNotification('エラーが発生しました', 'error');

                if (buttonElement) {
                    buttonElement.disabled = false;
                    buttonElement.innerHTML = originalContent;
                }
            }
        }

        async function generateReport(talkSessionID) {
            try {
                const buttonElement = event.target;
                const originalContent = buttonElement.innerHTML;
                buttonElement.disabled = true;
                buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> 処理中...';

                const response = await fetch(`/manage/regenerate`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        type:"report",
                        talkSessionID: talkSessionID,
                    }),
                });

                const result = await response.json();
                showNotification('レポートを再生成しました');

                buttonElement.disabled = false;
                buttonElement.innerHTML = originalContent;
            } catch (error) {
                console.error('Error:', error);
                showNotification('エラーが発生しました', 'error');

                if (buttonElement) {
                    buttonElement.disabled = false;
                    buttonElement.innerHTML = originalContent;
                }
            }
        }

        async function toggleHideReport(talkSessionID, hideStatus) {
            try {
                const buttonElement = event.target.closest('button');
                const originalContent = buttonElement.innerHTML;
                buttonElement.disabled = true;
                buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> 処理中...';

                const response = await fetch(`/manage/hideTalkSession`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        hide: hideStatus,
                        talkSessionID: talkSessionID,
                    }),
                });

                const result = await response.json();
                if (result.status === "success" || result.status === "ok") {
                    const statusElement = document.getElementById(`report-status-${talkSessionID}`);
                    const toggleButton = document.getElementById(`toggle-button-${talkSessionID}`);

                    if (hideStatus) {
                        statusElement.textContent = "レポート: 非表示";
                        statusElement.className = "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-700";
                        statusElement.innerHTML = '<i class="fas fa-eye-slash mr-1"></i> レポート: 非表示';

                        toggleButton.textContent = "レポート表示";
                        toggleButton.className = "inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors duration-200";
                        toggleButton.innerHTML = '<i class="fas fa-eye mr-2"></i> レポート表示';

                        showNotification('レポートを非表示にしました');
                    } else {
                        statusElement.textContent = "レポート: 表示";
                        statusElement.className = "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-700";
                        statusElement.innerHTML = '<i class="fas fa-eye mr-1"></i> レポート: 表示';

                        toggleButton.textContent = "レポート非表示";
                        toggleButton.className = "inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200";
                        toggleButton.innerHTML = '<i class="fas fa-eye-slash mr-2"></i> レポート非表示';

                        showNotification('レポートを表示にしました');
                    }

                    toggleButton.disabled = false;
                    toggleButton.onclick = () => toggleHideReport(talkSessionID, !hideStatus);

                } else {
                    showNotification('更新に失敗しました', 'error');
                    buttonElement.disabled = false;
                    buttonElement.innerHTML = originalContent;
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('エラーが発生しました', 'error');

                const buttonElement = document.getElementById(`toggle-button-${talkSessionID}`);
                if (buttonElement) {
                    buttonElement.disabled = false;
                    buttonElement.innerHTML = originalContent;
                }
            }
        }

        // シード意見を投稿する関数
        async function submitSeedOpinion() {
            try {

                const sessionId = document.getElementById('sessionId').value;
                const opinionContent = document.getElementById('opinionContent').value;
                const referenceURL = document.getElementById('referenceURL').value;

                // 入力検証
                if (!opinionContent || opinionContent.length < 5 || opinionContent.length > 140) {
                    showNotification('意見は5〜140文字で入力してください', 'error');
                    return;
                }

                // FormDataオブジェクトを作成
                const formData = new FormData();
                formData.append('talkSessionID', sessionId);
                formData.append('opinionContent', opinionContent);
                formData.append('isSeed', 'true');

                if (referenceURL) formData.append('referenceURL', referenceURL);

                // 送信処理中の表示
                const submitButton = document.querySelector('#seedOpinionForm button[type="button"]:last-child');
                const originalContent = submitButton.innerHTML;
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> 送信中...';

                // APIリクエスト
                const response = await fetch('/opinions', {
                    method: 'POST',
                    body: formData,
                });

                // レスポンス処理
                if (response.ok) {
                    showNotification('シード意見を投稿しました');

                    // モーダルを閉じて入力をクリア
                    console.log("querySelector", document.querySelector('[x-data]'));
                    document.querySelector('[x-data]').dispatchEvent(new CustomEvent('close-modal'));
                    document.getElementById('opinionContent').value = '';
                    document.getElementById('referenceURL').value = '';
                } else {
                    const errorData = await response.json();
                    showNotification(`投稿に失敗しました: ${errorData.message || '不明なエラー'}`, 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('エラーが発生しました', 'error');
            } finally {
                // ボタンを元に戻す
                const submitButton = document.querySelector('#seedOpinionForm button[type="button"]:last-child');
                submitButton.disabled = false;
                submitButton.innerHTML = '投稿する';
            }
        }

        window.onload = async function() {
            const user = await me();
            if (user) {
                document.getElementById("user").innerText = user.displayName;
                document.getElementById("user").style.display = "block";
            } else {
                document.getElementById("user").style.display = "none";
            }
        }

        async function me() {
            try {
                const response = await fetch(`/auth/token/info`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });

                const result = await response.json();
                if (result.code) {
                    return;
                }
                return result;
            } catch (error) {
                console.error('Error:', error);
            }
        }
    </script>
  </body>
</html>
