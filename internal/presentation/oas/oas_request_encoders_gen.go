// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"net/http"
	"strings"

	"github.com/go-faster/errors"

	"braces.dev/errtrace"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func encodeCreateTalkSessionRequest(
	req OptCreateTalkSessionReq,
	r *http.Request,
) error {
	const contentType = "application/x-www-form-urlencoded"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	request := req.Value

	q := uri.NewFormEncoder(map[string]string{})
	{
		// Encode "theme" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "theme",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := request.Theme.Get(); ok {
				return errtrace.Wrap(e.EncodeValue(conv.StringToString(val)))
			}
			return nil
		}); err != nil {
			return errtrace.Wrap(errors.Wrap(err, "encode query"))
		}
	}
	encoded := q.Values().Encode()
	ht.SetBody(r, strings.NewReader(encoded), contentType)
	return nil
}
