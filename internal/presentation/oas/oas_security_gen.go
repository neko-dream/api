// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleCookieAuth handles CookieAuth security.
	// Cookie-based authentication using JWT tokens stored in secure HTTP-only cookies.
	HandleCookieAuth(ctx context.Context, operationName OperationName, t CookieAuth) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

var operationRolesCookieAuth = map[string][]string{
	ApplyFeedbackToReportOperation:         []string{},
	AuthAccountDetachOperation:             []string{},
	ChangePasswordOperation:                []string{},
	CheckDeviceExistsOperation:             []string{},
	ConsentTalkSessionOperation:            []string{},
	CreateOrganizationAliasOperation:       []string{},
	DeleteDeviceOperation:                  []string{},
	DeleteOrganizationAliasOperation:       []string{},
	EditTalkSessionOperation:               []string{},
	EditTimeLineOperation:                  []string{},
	EstablishOrganizationOperation:         []string{},
	EstablishUserOperation:                 []string{},
	GetAnalysisReportManageOperation:       []string{},
	GetDevicesOperation:                    []string{},
	GetNotificationPreferencesOperation:    []string{},
	GetOpenedTalkSessionOperation:          []string{},
	GetOpinionReportsOperation:             []string{},
	GetOrganizationAliasesOperation:        []string{},
	GetOrganizationUsersOperation:          []string{},
	GetOrganizationsOperation:              []string{},
	GetReportsForTalkSessionOperation:      []string{},
	GetTalkSessionListManageOperation:      []string{},
	GetTalkSessionManageOperation:          []string{},
	GetTalkSessionReportCountOperation:     []string{},
	GetTokenInfoOperation:                  []string{},
	GetUserInfoOperation:                   []string{},
	GetUserListManageOperation:             []string{},
	GetUserStatsListManageOperation:        []string{},
	GetUserStatsTotalManageOperation:       []string{},
	GetVapidKeyOperation:                   []string{},
	HasConsentOperation:                    []string{},
	InitiateTalkSessionOperation:           []string{},
	InviteOrganizationOperation:            []string{},
	InviteOrganizationForUserOperation:     []string{},
	ManageRegenerateManageOperation:        []string{},
	OpinionsHistoryOperation:               []string{},
	PolicyConsentOperation:                 []string{},
	PostConclusionOperation:                []string{},
	PostImageOperation:                     []string{},
	PostOpinionPost2Operation:              []string{},
	PostTimeLineItemOperation:              []string{},
	ReactivateUserOperation:                []string{},
	RegisterDeviceOperation:                []string{},
	ReportOpinionOperation:                 []string{},
	RevokeTokenOperation:                   []string{},
	SendTestNotificationOperation:          []string{},
	SessionsHistoryOperation:               []string{},
	SolveOpinionReportOperation:            []string{},
	SwitchOrganizationOperation:            []string{},
	ToggleReportVisibilityManageOperation:  []string{},
	UpdateNotificationPreferencesOperation: []string{},
	UpdateOrganizationOperation:            []string{},
	UpdateUserProfileOperation:             []string{},
	Vote2Operation:                         []string{},
	WithdrawUserOperation:                  []string{},
}

func (s *Server) securityCookieAuth(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t CookieAuth
	const parameterName = "SessionId"
	var value string
	switch cookie, err := req.Cookie(parameterName); {
	case err == nil: // if NO error
		value = cookie.Value
	case errors.Is(err, http.ErrNoCookie):
		return ctx, false, nil
	default:
		return nil, false, errors.Wrap(err, "get cookie value")
	}
	t.APIKey = value
	t.Roles = operationRolesCookieAuth[operationName]
	rctx, err := s.sec.HandleCookieAuth(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}
