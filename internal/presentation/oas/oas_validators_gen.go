// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"

	"github.com/go-faster/errors"

	"braces.dev/errtrace"
	"github.com/ogen-go/ogen/validate"
)

func (s IndicateIntentionOKApplicationJSON) Validate() error {
	alias := ([]IndicateIntentionOKItem)(s)
	if alias == nil {
		return errtrace.Wrap(errors.New("nil is invalid value"))
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return errtrace.Wrap(err)
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return errtrace.Wrap(&validate.Error{Fields: failures})
	}
	return nil
}

func (s *IndicateIntentionOKItem) Validate() error {
	if s == nil {
		return errtrace.Wrap(validate.ErrNilPointer)
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    140,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.OpinionContent)); err != nil {
			return errtrace.Wrap(errors.Wrap(err, "string"))
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "opinionContent",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return errtrace.Wrap(&validate.Error{Fields: failures})
	}
	return nil
}

func (s ListOpinionsOKApplicationJSON) Validate() error {
	alias := ([]ListOpinionsOKItem)(s)
	if alias == nil {
		return errtrace.Wrap(errors.New("nil is invalid value"))
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return errtrace.Wrap(err)
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return errtrace.Wrap(&validate.Error{Fields: failures})
	}
	return nil
}

func (s *ListOpinionsOKItem) Validate() error {
	if s == nil {
		return errtrace.Wrap(validate.ErrNilPointer)
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    140,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.OpinionContent)); err != nil {
			return errtrace.Wrap(errors.Wrap(err, "string"))
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "opinionContent",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return errtrace.Wrap(&validate.Error{Fields: failures})
	}
	return nil
}
