// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// AuthAccountDetach implements authAccountDetach operation.
//
// そのアカウントには再度ログインできなくなります。ログインしたければ言ってね！.
//
// DELETE /auth/dev/detach
func (UnimplementedHandler) AuthAccountDetach(ctx context.Context) (r AuthAccountDetachRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Authorize implements authorize operation.
//
// ログイン.
//
// GET /auth/{provider}/login
func (UnimplementedHandler) Authorize(ctx context.Context, params AuthorizeParams) (r AuthorizeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ChangePassword implements changePassword operation.
//
// パスワード変更.
//
// PUT /auth/password/change
func (UnimplementedHandler) ChangePassword(ctx context.Context, params ChangePasswordParams) (r ChangePasswordRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ConsentTalkSession implements consentTalkSession operation.
//
// セッションへの同意.
//
// POST /talksessions/{talkSessionID}/consent
func (UnimplementedHandler) ConsentTalkSession(ctx context.Context, params ConsentTalkSessionParams) (r ConsentTalkSessionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateOrganizationAlias implements createOrganizationAlias operation.
//
// 組織エイリアス作成.
//
// POST /organizations/aliases
func (UnimplementedHandler) CreateOrganizationAlias(ctx context.Context, req *CreateOrganizationAliasReq) (r CreateOrganizationAliasRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteOrganizationAlias implements deleteOrganizationAlias operation.
//
// 組織エイリアス削除.
//
// DELETE /organizations/aliases/{aliasID}
func (UnimplementedHandler) DeleteOrganizationAlias(ctx context.Context, params DeleteOrganizationAliasParams) (r DeleteOrganizationAliasRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DevAuthorize implements devAuthorize operation.
//
// 開発用登録/ログイン.
//
// GET /auth/dev/login
func (UnimplementedHandler) DevAuthorize(ctx context.Context, params DevAuthorizeParams) (r DevAuthorizeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DummiInit implements dummiInit operation.
//
// Mudai.
//
// POST /test/dummy
func (UnimplementedHandler) DummiInit(ctx context.Context) (r DummiInitRes, _ error) {
	return r, ht.ErrNotImplemented
}

// EditTalkSession implements editTalkSession operation.
//
// セッション編集.
//
// PUT /talksessions/{talkSessionID}
func (UnimplementedHandler) EditTalkSession(ctx context.Context, req *EditTalkSessionReq, params EditTalkSessionParams) (r EditTalkSessionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// EditTimeLine implements editTimeLine operation.
//
// タイムライン編集.
//
// PUT /talksessions/{talkSessionID}/timelines/{actionItemID}
func (UnimplementedHandler) EditTimeLine(ctx context.Context, req *EditTimeLineReq, params EditTimeLineParams) (r EditTimeLineRes, _ error) {
	return r, ht.ErrNotImplemented
}

// EstablishOrganization implements establishOrganization operation.
//
// 組織を作成できる。
// これを作れるユーザーはDBを直接叩いて作るしかない。.
//
// POST /organizations
func (UnimplementedHandler) EstablishOrganization(ctx context.Context, req *EstablishOrganizationReq) (r EstablishOrganizationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// EstablishUser implements establishUser operation.
//
// ユーザー作成.
//
// POST /user
func (UnimplementedHandler) EstablishUser(ctx context.Context, req *EstablishUserReq) (r EstablishUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAnalysisReportManage implements getAnalysisReportManage operation.
//
// GET /v1/manage/talksessions/{talkSessionID}/analysis/report
func (UnimplementedHandler) GetAnalysisReportManage(ctx context.Context, params GetAnalysisReportManageParams) (r *AnalysisReportResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// GetConclusion implements getConclusion operation.
//
// 結論取得.
//
// GET /talksessions/{talkSessionID}/conclusion
func (UnimplementedHandler) GetConclusion(ctx context.Context, params GetConclusionParams) (r GetConclusionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOpenedTalkSession implements getOpenedTalkSession operation.
//
// 自分が開いたセッション一覧.
//
// GET /talksessions/opened
func (UnimplementedHandler) GetOpenedTalkSession(ctx context.Context, params GetOpenedTalkSessionParams) (r GetOpenedTalkSessionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOpinionAnalysis implements getOpinionAnalysis operation.
//
// 意見に投票したグループごとの割合.
//
// GET /opinions/{opinionID}/analysis
func (UnimplementedHandler) GetOpinionAnalysis(ctx context.Context, params GetOpinionAnalysisParams) (r GetOpinionAnalysisRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOpinionDetail2 implements getOpinionDetail2 operation.
//
// 意見詳細.
//
// GET /opinions/{opinionID}
func (UnimplementedHandler) GetOpinionDetail2(ctx context.Context, params GetOpinionDetail2Params) (r GetOpinionDetail2Res, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOpinionReportReasons implements getOpinionReportReasons operation.
//
// 意見への通報理由一覧.
//
// GET /opinions/report_reasons
func (UnimplementedHandler) GetOpinionReportReasons(ctx context.Context) (r GetOpinionReportReasonsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOpinionReports implements getOpinionReports operation.
//
// セッション作成者しか取得できない.
//
// GET /opinions/{opinionID}/reports
func (UnimplementedHandler) GetOpinionReports(ctx context.Context, params GetOpinionReportsParams) (r GetOpinionReportsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOpinionsForTalkSession implements getOpinionsForTalkSession operation.
//
// セッションに対する意見一覧.
//
// GET /talksessions/{talkSessionID}/opinions
func (UnimplementedHandler) GetOpinionsForTalkSession(ctx context.Context, params GetOpinionsForTalkSessionParams) (r GetOpinionsForTalkSessionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOrganizationAliases implements getOrganizationAliases operation.
//
// 組織エイリアス一覧取得.
//
// GET /organizations/aliases
func (UnimplementedHandler) GetOrganizationAliases(ctx context.Context) (r GetOrganizationAliasesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOrganizationUsers implements getOrganizationUsers operation.
//
// 現在の組織のユーザー一覧取得.
//
// GET /organizations/users
func (UnimplementedHandler) GetOrganizationUsers(ctx context.Context) (r GetOrganizationUsersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOrganizations implements getOrganizations operation.
//
// 所属組織一覧.
//
// GET /organizations
func (UnimplementedHandler) GetOrganizations(ctx context.Context) (r GetOrganizationsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPolicyConsentStatus implements getPolicyConsentStatus operation.
//
// 最新のポリシーに同意したかを取得.
//
// GET /policy/consent
func (UnimplementedHandler) GetPolicyConsentStatus(ctx context.Context) (r GetPolicyConsentStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetReportsForTalkSession implements getReportsForTalkSession operation.
//
// 通報一覧.
//
// GET /talksessions/{talkSessionID}/reports
func (UnimplementedHandler) GetReportsForTalkSession(ctx context.Context, params GetReportsForTalkSessionParams) (r GetReportsForTalkSessionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTalkSessionDetail implements getTalkSessionDetail operation.
//
// トークセッションの詳細.
//
// GET /talksessions/{talkSessionID}
func (UnimplementedHandler) GetTalkSessionDetail(ctx context.Context, params GetTalkSessionDetailParams) (r GetTalkSessionDetailRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTalkSessionList implements getTalkSessionList operation.
//
// セッション一覧.
//
// GET /talksessions
func (UnimplementedHandler) GetTalkSessionList(ctx context.Context, params GetTalkSessionListParams) (r GetTalkSessionListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTalkSessionListManage implements getTalkSessionListManage operation.
//
// GET /v1/manage/talksessions/list
func (UnimplementedHandler) GetTalkSessionListManage(ctx context.Context, params GetTalkSessionListManageParams) (r *TalkSessionListResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTalkSessionManage implements getTalkSessionManage operation.
//
// GET /v1/manage/talksessions/{talkSessionID}
func (UnimplementedHandler) GetTalkSessionManage(ctx context.Context, params GetTalkSessionManageParams) (r *TalkSessionForManage, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTalkSessionReport implements getTalkSessionReport operation.
//
// セッションレポートを返す.
//
// GET /talksessions/{talkSessionID}/report
func (UnimplementedHandler) GetTalkSessionReport(ctx context.Context, params GetTalkSessionReportParams) (r GetTalkSessionReportRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTalkSessionReportCount implements getTalkSessionReportCount operation.
//
// 通報件数.
//
// GET /talksessions/{talkSessionID}/reports/count
func (UnimplementedHandler) GetTalkSessionReportCount(ctx context.Context, params GetTalkSessionReportCountParams) (r GetTalkSessionReportCountRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTalkSessionRestrictionKeys implements getTalkSessionRestrictionKeys operation.
//
// セッションの投稿制限に使用できるキーの一覧を返す.
//
// GET /talksessions/restrictions
func (UnimplementedHandler) GetTalkSessionRestrictionKeys(ctx context.Context) (r GetTalkSessionRestrictionKeysRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTalkSessionRestrictionSatisfied implements getTalkSessionRestrictionSatisfied operation.
//
// 特定のセッションで満たしていない条件があれば返す.
//
// GET /talksessions/{talkSessionID}/restrictions
func (UnimplementedHandler) GetTalkSessionRestrictionSatisfied(ctx context.Context, params GetTalkSessionRestrictionSatisfiedParams) (r GetTalkSessionRestrictionSatisfiedRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTimeLine implements getTimeLine operation.
//
// タイムラインはセッション終了後にセッション作成者が設定できるその後の予定を知らせるもの.
//
// GET /talksessions/{talkSessionID}/timelines
func (UnimplementedHandler) GetTimeLine(ctx context.Context, params GetTimeLineParams) (r GetTimeLineRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTokenInfo implements getTokenInfo operation.
//
// JWTの内容を返してくれる.
//
// GET /auth/token/info
func (UnimplementedHandler) GetTokenInfo(ctx context.Context) (r GetTokenInfoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUserInfo implements getUserInfo operation.
//
// ユーザー情報の取得.
//
// GET /user
func (UnimplementedHandler) GetUserInfo(ctx context.Context) (r GetUserInfoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUserListManage implements getUserListManage operation.
//
// GET /v1/manage/users/list
func (UnimplementedHandler) GetUserListManage(ctx context.Context, params GetUserListManageParams) (r []UserForManage, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUserStatsListManage implements getUserStatsListManage operation.
//
// GET /v1/manage/users/stats/list
func (UnimplementedHandler) GetUserStatsListManage(ctx context.Context, params GetUserStatsListManageParams) (r []UserStatsResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUserStatsTotalManage implements getUserStatsTotalManage operation.
//
// GET /v1/manage/users/stats/total
func (UnimplementedHandler) GetUserStatsTotalManage(ctx context.Context) (r *UserStatsResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// HandleAuthCallback implements handleAuthCallback operation.
//
// Auth Callback.
//
// GET /auth/{provider}/callback
func (UnimplementedHandler) HandleAuthCallback(ctx context.Context, params HandleAuthCallbackParams) (r HandleAuthCallbackRes, _ error) {
	return r, ht.ErrNotImplemented
}

// HasConsent implements hasConsent operation.
//
// セッションに同意しているか.
//
// GET /talksessions/{talkSessionID}/consent
func (UnimplementedHandler) HasConsent(ctx context.Context, params HasConsentParams) (r HasConsentRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Health implements health operation.
//
// ヘルスチェック.
//
// GET /health
func (UnimplementedHandler) Health(ctx context.Context) (r HealthRes, _ error) {
	return r, ht.ErrNotImplemented
}

// InitiateTalkSession implements initiateTalkSession operation.
//
// ## サムネイル画像について
// - `Description中に出てくる画像で一番最初のものを使用`。
// - 画像自体は`POST /images`でサーバにポストしたものを使用してください。
// ## 投稿制限のキーについて
// restrictionsに値を入れると一定のデモグラ情報を登録していない限り、セッションへの投稿が制限されるようにできる。
// restrictionsには [GET /talksessions/restrictions](https://app.apidog.
// com/link/project/674502/apis/api-14271260)
// より取れるkeyをカンマ区切りで入力してください。.
//
// POST /talksessions
func (UnimplementedHandler) InitiateTalkSession(ctx context.Context, req *InitiateTalkSessionReq) (r InitiateTalkSessionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// InviteOrganization implements inviteOrganization operation.
//
// Role
// - 10: SuperAdmin
// - 20: Owner
// - 30: Admin
// - 40: Member.
//
// POST /organizations/invite
func (UnimplementedHandler) InviteOrganization(ctx context.Context, req *InviteOrganizationReq) (r InviteOrganizationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// InviteOrganizationForUser implements inviteOrganizationForUser operation.
//
// 組織にユーザーを追加.
//
// POST /organizations/invite_user
func (UnimplementedHandler) InviteOrganizationForUser(ctx context.Context, req *InviteOrganizationForUserReq) (r InviteOrganizationForUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ManageRegenerateManage implements manageRegenerateManage operation.
//
// POST /v1/manage/talksessions/{talkSessionID}/analysis/regenerate
func (UnimplementedHandler) ManageRegenerateManage(ctx context.Context, req *RegenerateRequest, params ManageRegenerateManageParams) (r *RegenerateResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// OpinionComments2 implements opinionComments2 operation.
//
// 意見に対するリプライ意見一覧.
//
// GET /opinions/{opinionID}/replies
func (UnimplementedHandler) OpinionComments2(ctx context.Context, params OpinionComments2Params) (r OpinionComments2Res, _ error) {
	return r, ht.ErrNotImplemented
}

// OpinionsHistory implements opinionsHistory operation.
//
// 今までに投稿した意見.
//
// GET /opinions/histories
func (UnimplementedHandler) OpinionsHistory(ctx context.Context, params OpinionsHistoryParams) (r OpinionsHistoryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PasswordLogin implements passwordLogin operation.
//
// パスワードによるログイン.
//
// POST /auth/password/login
func (UnimplementedHandler) PasswordLogin(ctx context.Context, req *PasswordLoginReq) (r PasswordLoginRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PasswordRegister implements passwordRegister operation.
//
// パスワードによる登録（devのみ）.
//
// POST /auth/password/register
func (UnimplementedHandler) PasswordRegister(ctx context.Context, req *PasswordRegisterReq) (r PasswordRegisterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PolicyConsent implements policyConsent operation.
//
// 最新のポリシーに同意する.
//
// POST /policy/consent
func (UnimplementedHandler) PolicyConsent(ctx context.Context, req *PolicyConsentReq) (r PolicyConsentRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostConclusion implements postConclusion operation.
//
// 結論（conclusion）はセッションが終了した後にセッっションの作成者が投稿できる文章。
// セッションの流れやグループの分かれ方などに対するセッション作成者の感想やそれらの意見を受け、これからの方向性などを記入する。.
//
// POST /talksessions/{talkSessionID}/conclusion
func (UnimplementedHandler) PostConclusion(ctx context.Context, req *PostConclusionReq, params PostConclusionParams) (r PostConclusionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostImage implements postImage operation.
//
// 画像を投稿してURLを返すAPI.
//
// POST /images
func (UnimplementedHandler) PostImage(ctx context.Context, req *PostImageReq) (r PostImageRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostOpinionPost2 implements postOpinionPost2 operation.
//
// ParentOpinionIDがなければルートの意見として投稿される
// parentOpinionIDがない場合はtalkSessionIDが必須
// セッション管理者はisSeedをtrueにするとシード意見として投稿できる.
//
// POST /opinions
func (UnimplementedHandler) PostOpinionPost2(ctx context.Context, req *PostOpinionPost2Req) (r PostOpinionPost2Res, _ error) {
	return r, ht.ErrNotImplemented
}

// PostTimeLineItem implements postTimeLineItem operation.
//
// タイムラインアイテム追加.
//
// POST /talksessions/{talkSessionID}/timeline
func (UnimplementedHandler) PostTimeLineItem(ctx context.Context, req *PostTimeLineItemReq, params PostTimeLineItemParams) (r PostTimeLineItemRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReportOpinion implements reportOpinion operation.
//
// 意見通報API.
//
// POST /opinions/{opinionID}/report
func (UnimplementedHandler) ReportOpinion(ctx context.Context, req *ReportOpinionReq, params ReportOpinionParams) (r ReportOpinionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RevokeToken implements revokeToken operation.
//
// トークンを失効（ログアウト）.
//
// POST /auth/revoke
func (UnimplementedHandler) RevokeToken(ctx context.Context) (r RevokeTokenRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SessionsHistory implements sessionsHistory operation.
//
// リアクション済みのセッション一覧.
//
// GET /talksessions/histories
func (UnimplementedHandler) SessionsHistory(ctx context.Context, params SessionsHistoryParams) (r SessionsHistoryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SolveOpinionReport implements solveOpinionReport operation.
//
// 通報を解決.
//
// POST /opinions/{opinionID}/reports/solve
func (UnimplementedHandler) SolveOpinionReport(ctx context.Context, req *SolveOpinionReportReq, params SolveOpinionReportParams) (r SolveOpinionReportRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SwipeOpinions implements swipeOpinions operation.
//
// セッションの中からまだ投票していない意見をランダムに取得する
// remainingCountは取得した意見を含めてスワイプできる意見の総数を返す.
//
// GET /talksessions/{talkSessionID}/swipe_opinions
func (UnimplementedHandler) SwipeOpinions(ctx context.Context, params SwipeOpinionsParams) (r SwipeOpinionsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TalkSessionAnalysis implements talkSessionAnalysis operation.
//
// 分析結果一覧.
//
// GET /talksessions/{talkSessionID}/analysis
func (UnimplementedHandler) TalkSessionAnalysis(ctx context.Context, params TalkSessionAnalysisParams) (r TalkSessionAnalysisRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Test implements test operation.
//
// OpenAPIテスト用.
//
// GET /test
func (UnimplementedHandler) Test(ctx context.Context) (r TestRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ToggleReportVisibilityManage implements toggleReportVisibilityManage operation.
//
// POST /v1/manage/talksessions/{talkSessionID}/analysis/report
func (UnimplementedHandler) ToggleReportVisibilityManage(ctx context.Context, req *ToggleReportVisibilityRequest, params ToggleReportVisibilityManageParams) (r *ToggleReportVisibilityResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateUserProfile implements updateUserProfile operation.
//
// ユーザー情報の変更.
//
// PUT /user
func (UnimplementedHandler) UpdateUserProfile(ctx context.Context, req *UpdateUserProfileReq) (r UpdateUserProfileRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateOrganizationCode implements validateOrganizationCode operation.
//
// 組織コード検証.
//
// GET /organization/{code}/validate
func (UnimplementedHandler) ValidateOrganizationCode(ctx context.Context, params ValidateOrganizationCodeParams) (r ValidateOrganizationCodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Vote2 implements vote2 operation.
//
// 意思表明API.
//
// POST /opinions/{opinionID}/votes
func (UnimplementedHandler) Vote2(ctx context.Context, req *Vote2Req, params Vote2Params) (r Vote2Res, _ error) {
	return r, ht.ErrNotImplemented
}
