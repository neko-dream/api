// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"go.uber.org/multierr"

	"braces.dev/errtrace"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

func (s *Server) decodeCreateTalkSessionRequest(r *http.Request) (
	req OptCreateTalkSessionReq,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return errtrace.Wrap(merr)
	}
	defer func() {
		if rerr != nil {
			rerr = errtrace.Wrap(multierr.Append(rerr, close()))
		}
	}()
	if _, ok := r.Header["Content-Type"]; !ok && r.ContentLength == 0 {
		return req, close, nil
	}
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errtrace.Wrap(errors.Wrap(err, "parse media type"))
	}
	switch {
	case ct == "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, nil
		}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, close, errtrace.Wrap(errors.Wrap(err, "parse form"))
		}

		var request OptCreateTalkSessionReq
		{
			var optForm CreateTalkSessionReq
			q := uri.NewQueryDecoder(form)
			{
				cfg := uri.QueryParameterDecodingConfig{
					Name:    "theme",
					Style:   uri.QueryStyleForm,
					Explode: true,
				}
				if err := q.HasParam(cfg); err == nil {
					if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
						var optFormDotThemeVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return errtrace.Wrap(err)
							}

							c, err := conv.ToString(val)
							if err != nil {
								return errtrace.Wrap(err)
							}

							optFormDotThemeVal = c
							return nil
						}(); err != nil {
							return errtrace.Wrap(err)
						}
						optForm.Theme.SetTo(optFormDotThemeVal)
						return nil
					}); err != nil {
						return req, close, errtrace.Wrap(errors.Wrap(err, "decode \"theme\""))
					}
				}
			}
			request = OptCreateTalkSessionReq{
				Value: optForm,
				Set:   true,
			}
		}
		return request, close, nil
	default:
		return req, close, errtrace.Wrap(validate.InvalidContentType(ct))
	}
}
