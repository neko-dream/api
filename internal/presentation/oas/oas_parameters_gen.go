// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AuthorizeParams is parameters of authorize operation.
type AuthorizeParams struct {
	Provider AuthorizeProvider
	// ログイン後にリダイレクトするURL.
	RedirectURL string
	// 組織コード（組織ログインの場合）.
	OrganizationCode OptString
	// 登録していなかった場合に飛ばすURL.
	RegistrationURL OptString
}

func unpackAuthorizeParams(packed middleware.Parameters) (params AuthorizeParams) {
	{
		key := middleware.ParameterKey{
			Name: "provider",
			In:   "path",
		}
		params.Provider = packed[key].(AuthorizeProvider)
	}
	{
		key := middleware.ParameterKey{
			Name: "redirect_url",
			In:   "query",
		}
		params.RedirectURL = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "organization_code",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.OrganizationCode = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "registration_url",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.RegistrationURL = v.(OptString)
		}
	}
	return params
}

func decodeAuthorizeParams(args [1]string, argsEscaped bool, r *http.Request) (params AuthorizeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: provider.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "provider",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Provider = AuthorizeProvider(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Provider.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "provider",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: redirect_url.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "redirect_url",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RedirectURL = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "redirect_url",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: organization_code.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "organization_code",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrganizationCodeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrganizationCodeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.OrganizationCode.SetTo(paramsDotOrganizationCodeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_code",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: registration_url.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "registration_url",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRegistrationURLVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRegistrationURLVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RegistrationURL.SetTo(paramsDotRegistrationURLVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "registration_url",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ChangePasswordParams is parameters of changePassword operation.
type ChangePasswordParams struct {
	// 古いパスワード.
	OldPassword string
	// 新たなパスワード.
	NewPassword string
}

func unpackChangePasswordParams(packed middleware.Parameters) (params ChangePasswordParams) {
	{
		key := middleware.ParameterKey{
			Name: "oldPassword",
			In:   "query",
		}
		params.OldPassword = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "newPassword",
			In:   "query",
		}
		params.NewPassword = packed[key].(string)
	}
	return params
}

func decodeChangePasswordParams(args [0]string, argsEscaped bool, r *http.Request) (params ChangePasswordParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: oldPassword.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "oldPassword",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OldPassword = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "oldPassword",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: newPassword.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "newPassword",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.NewPassword = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "newPassword",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// CheckDeviceExistsParams is parameters of checkDeviceExists operation.
type CheckDeviceExistsParams struct {
	// FCMトークンまたはAPNSトークン.
	DeviceToken string
}

func unpackCheckDeviceExistsParams(packed middleware.Parameters) (params CheckDeviceExistsParams) {
	{
		key := middleware.ParameterKey{
			Name: "device_token",
			In:   "query",
		}
		params.DeviceToken = packed[key].(string)
	}
	return params
}

func decodeCheckDeviceExistsParams(args [0]string, argsEscaped bool, r *http.Request) (params CheckDeviceExistsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: device_token.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "device_token",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DeviceToken = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device_token",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ConsentTalkSessionParams is parameters of consentTalkSession operation.
type ConsentTalkSessionParams struct {
	TalkSessionID string
}

func unpackConsentTalkSessionParams(packed middleware.Parameters) (params ConsentTalkSessionParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodeConsentTalkSessionParams(args [1]string, argsEscaped bool, r *http.Request) (params ConsentTalkSessionParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteDeviceParams is parameters of deleteDevice operation.
type DeleteDeviceParams struct {
	DeviceId string
}

func unpackDeleteDeviceParams(packed middleware.Parameters) (params DeleteDeviceParams) {
	{
		key := middleware.ParameterKey{
			Name: "deviceId",
			In:   "path",
		}
		params.DeviceId = packed[key].(string)
	}
	return params
}

func decodeDeleteDeviceParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteDeviceParams, _ error) {
	// Decode path: deviceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "deviceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DeviceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "deviceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteOrganizationAliasParams is parameters of deleteOrganizationAlias operation.
type DeleteOrganizationAliasParams struct {
	AliasID string
}

func unpackDeleteOrganizationAliasParams(packed middleware.Parameters) (params DeleteOrganizationAliasParams) {
	{
		key := middleware.ParameterKey{
			Name: "aliasID",
			In:   "path",
		}
		params.AliasID = packed[key].(string)
	}
	return params
}

func decodeDeleteOrganizationAliasParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteOrganizationAliasParams, _ error) {
	// Decode path: aliasID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "aliasID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AliasID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "aliasID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DevAuthorizeParams is parameters of devAuthorize operation.
type DevAuthorizeParams struct {
	RedirectURL string
	// Devのみで使用するsubjectです。ここで指定した値はログインした後も確認できないため覚えておいてください。同じ値を指定すると同じアカウントにログインできます。.
	ID string
	// 組織コード（組織ログインの場合）.
	OrganizationCode OptString
}

func unpackDevAuthorizeParams(packed middleware.Parameters) (params DevAuthorizeParams) {
	{
		key := middleware.ParameterKey{
			Name: "redirect_url",
			In:   "query",
		}
		params.RedirectURL = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "organizationCode",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.OrganizationCode = v.(OptString)
		}
	}
	return params
}

func decodeDevAuthorizeParams(args [0]string, argsEscaped bool, r *http.Request) (params DevAuthorizeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: redirect_url.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "redirect_url",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RedirectURL = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "redirect_url",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: organizationCode.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "organizationCode",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrganizationCodeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrganizationCodeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.OrganizationCode.SetTo(paramsDotOrganizationCodeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationCode",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// EditTalkSessionParams is parameters of editTalkSession operation.
type EditTalkSessionParams struct {
	TalkSessionID string
}

func unpackEditTalkSessionParams(packed middleware.Parameters) (params EditTalkSessionParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodeEditTalkSessionParams(args [1]string, argsEscaped bool, r *http.Request) (params EditTalkSessionParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// EditTimeLineParams is parameters of editTimeLine operation.
type EditTimeLineParams struct {
	TalkSessionID string
	ActionItemID  string
}

func unpackEditTimeLineParams(packed middleware.Parameters) (params EditTimeLineParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "actionItemID",
			In:   "path",
		}
		params.ActionItemID = packed[key].(string)
	}
	return params
}

func decodeEditTimeLineParams(args [2]string, argsEscaped bool, r *http.Request) (params EditTimeLineParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: actionItemID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "actionItemID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ActionItemID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "actionItemID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAnalysisReportManageParams is parameters of getAnalysisReportManage operation.
type GetAnalysisReportManageParams struct {
	TalkSessionID string
}

func unpackGetAnalysisReportManageParams(packed middleware.Parameters) (params GetAnalysisReportManageParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodeGetAnalysisReportManageParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAnalysisReportManageParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetConclusionParams is parameters of getConclusion operation.
type GetConclusionParams struct {
	TalkSessionID string
}

func unpackGetConclusionParams(packed middleware.Parameters) (params GetConclusionParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodeGetConclusionParams(args [1]string, argsEscaped bool, r *http.Request) (params GetConclusionParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetOpenedTalkSessionParams is parameters of getOpenedTalkSession operation.
type GetOpenedTalkSessionParams struct {
	Limit  OptInt
	Offset OptInt
	// テーマ.
	Theme  OptString
	Status OptNilGetOpenedTalkSessionStatus
}

func unpackGetOpenedTalkSessionParams(packed middleware.Parameters) (params GetOpenedTalkSessionParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "theme",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Theme = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Status = v.(OptNilGetOpenedTalkSessionStatus)
		}
	}
	return params
}

func decodeGetOpenedTalkSessionParams(args [0]string, argsEscaped bool, r *http.Request) (params GetOpenedTalkSessionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: limit.
	{
		val := int(10)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: theme.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "theme",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotThemeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotThemeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Theme.SetTo(paramsDotThemeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "theme",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal GetOpenedTalkSessionStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = GetOpenedTalkSessionStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Status.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetOpinionAnalysisParams is parameters of getOpinionAnalysis operation.
type GetOpinionAnalysisParams struct {
	OpinionID string
}

func unpackGetOpinionAnalysisParams(packed middleware.Parameters) (params GetOpinionAnalysisParams) {
	{
		key := middleware.ParameterKey{
			Name: "opinionID",
			In:   "path",
		}
		params.OpinionID = packed[key].(string)
	}
	return params
}

func decodeGetOpinionAnalysisParams(args [1]string, argsEscaped bool, r *http.Request) (params GetOpinionAnalysisParams, _ error) {
	// Decode path: opinionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "opinionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OpinionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "opinionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetOpinionDetail2Params is parameters of getOpinionDetail2 operation.
type GetOpinionDetail2Params struct {
	OpinionID string
}

func unpackGetOpinionDetail2Params(packed middleware.Parameters) (params GetOpinionDetail2Params) {
	{
		key := middleware.ParameterKey{
			Name: "opinionID",
			In:   "path",
		}
		params.OpinionID = packed[key].(string)
	}
	return params
}

func decodeGetOpinionDetail2Params(args [1]string, argsEscaped bool, r *http.Request) (params GetOpinionDetail2Params, _ error) {
	// Decode path: opinionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "opinionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OpinionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "opinionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetOpinionReportsParams is parameters of getOpinionReports operation.
type GetOpinionReportsParams struct {
	OpinionID string
}

func unpackGetOpinionReportsParams(packed middleware.Parameters) (params GetOpinionReportsParams) {
	{
		key := middleware.ParameterKey{
			Name: "opinionID",
			In:   "path",
		}
		params.OpinionID = packed[key].(string)
	}
	return params
}

func decodeGetOpinionReportsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetOpinionReportsParams, _ error) {
	// Decode path: opinionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "opinionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OpinionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "opinionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetOpinionsForTalkSessionParams is parameters of getOpinionsForTalkSession operation.
type GetOpinionsForTalkSessionParams struct {
	TalkSessionID string
	Sort          OptNilGetOpinionsForTalkSessionSort
	Limit         OptNilInt
	Offset        OptNilInt
	Seed          OptNilBool
}

func unpackGetOpinionsForTalkSessionParams(packed middleware.Parameters) (params GetOpinionsForTalkSessionParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "sort",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Sort = v.(OptNilGetOpinionsForTalkSessionSort)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptNilInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptNilInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "seed",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Seed = v.(OptNilBool)
		}
	}
	return params
}

func decodeGetOpinionsForTalkSessionParams(args [1]string, argsEscaped bool, r *http.Request) (params GetOpinionsForTalkSessionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: sort.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal GetOpinionsForTalkSessionSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = GetOpinionsForTalkSessionSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Sort.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: seed.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "seed",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSeedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSeedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Seed.SetTo(paramsDotSeedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "seed",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetReportsForTalkSessionParams is parameters of getReportsForTalkSession operation.
type GetReportsForTalkSessionParams struct {
	TalkSessionID string
	Status        OptGetReportsForTalkSessionStatus
}

func unpackGetReportsForTalkSessionParams(packed middleware.Parameters) (params GetReportsForTalkSessionParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Status = v.(OptGetReportsForTalkSessionStatus)
		}
	}
	return params
}

func decodeGetReportsForTalkSessionParams(args [1]string, argsEscaped bool, r *http.Request) (params GetReportsForTalkSessionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal GetReportsForTalkSessionStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = GetReportsForTalkSessionStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Status.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetTalkSessionDetailParams is parameters of getTalkSessionDetail operation.
type GetTalkSessionDetailParams struct {
	TalkSessionID string
}

func unpackGetTalkSessionDetailParams(packed middleware.Parameters) (params GetTalkSessionDetailParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodeGetTalkSessionDetailParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTalkSessionDetailParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetTalkSessionListParams is parameters of getTalkSessionList operation.
type GetTalkSessionListParams struct {
	// Ir
	// 1ページあたりの要素数.
	Limit OptNilInt
	// どの要素から始めるか.
	Offset    OptNilInt
	Theme     OptNilString
	Status    OptNilGetTalkSessionListStatus
	SortKey   OptGetTalkSessionListSortKey
	Latitude  OptNilFloat64
	Longitude OptNilFloat64
}

func unpackGetTalkSessionListParams(packed middleware.Parameters) (params GetTalkSessionListParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptNilInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptNilInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "theme",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Theme = v.(OptNilString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Status = v.(OptNilGetTalkSessionListStatus)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sortKey",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortKey = v.(OptGetTalkSessionListSortKey)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "latitude",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Latitude = v.(OptNilFloat64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "longitude",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Longitude = v.(OptNilFloat64)
		}
	}
	return params
}

func decodeGetTalkSessionListParams(args [0]string, argsEscaped bool, r *http.Request) (params GetTalkSessionListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: theme.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "theme",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotThemeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotThemeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Theme.SetTo(paramsDotThemeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "theme",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: status.
	{
		val := GetTalkSessionListStatus("open")
		params.Status.SetTo(val)
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal GetTalkSessionListStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = GetTalkSessionListStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Status.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sortKey.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sortKey",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortKeyVal GetTalkSessionListSortKey
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortKeyVal = GetTalkSessionListSortKey(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortKey.SetTo(paramsDotSortKeyVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortKey.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sortKey",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: latitude.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "latitude",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLatitudeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotLatitudeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Latitude.SetTo(paramsDotLatitudeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Latitude.Get(); ok {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "latitude",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: longitude.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "longitude",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLongitudeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotLongitudeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Longitude.SetTo(paramsDotLongitudeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Longitude.Get(); ok {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "longitude",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetTalkSessionListManageParams is parameters of getTalkSessionListManage operation.
type GetTalkSessionListManageParams struct {
	Status OptGetTalkSessionListManageStatus
	Offset OptInt32
	Limit  OptInt32
}

func unpackGetTalkSessionListManageParams(packed middleware.Parameters) (params GetTalkSessionListManageParams) {
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Status = v.(OptGetTalkSessionListManageStatus)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	return params
}

func decodeGetTalkSessionListManageParams(args [0]string, argsEscaped bool, r *http.Request) (params GetTalkSessionListManageParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal GetTalkSessionListManageStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = GetTalkSessionListManageStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Status.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetTalkSessionManageParams is parameters of getTalkSessionManage operation.
type GetTalkSessionManageParams struct {
	TalkSessionID string
}

func unpackGetTalkSessionManageParams(packed middleware.Parameters) (params GetTalkSessionManageParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodeGetTalkSessionManageParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTalkSessionManageParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetTalkSessionReportParams is parameters of getTalkSessionReport operation.
type GetTalkSessionReportParams struct {
	TalkSessionID string
}

func unpackGetTalkSessionReportParams(packed middleware.Parameters) (params GetTalkSessionReportParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodeGetTalkSessionReportParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTalkSessionReportParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetTalkSessionReportCountParams is parameters of getTalkSessionReportCount operation.
type GetTalkSessionReportCountParams struct {
	TalkSessionID string
	Status        GetTalkSessionReportCountStatus
}

func unpackGetTalkSessionReportCountParams(packed middleware.Parameters) (params GetTalkSessionReportCountParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		params.Status = packed[key].(GetTalkSessionReportCountStatus)
	}
	return params
}

func decodeGetTalkSessionReportCountParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTalkSessionReportCountParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Status = GetTalkSessionReportCountStatus(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Status.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetTalkSessionRestrictionSatisfiedParams is parameters of getTalkSessionRestrictionSatisfied operation.
type GetTalkSessionRestrictionSatisfiedParams struct {
	TalkSessionID string
}

func unpackGetTalkSessionRestrictionSatisfiedParams(packed middleware.Parameters) (params GetTalkSessionRestrictionSatisfiedParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodeGetTalkSessionRestrictionSatisfiedParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTalkSessionRestrictionSatisfiedParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetTimeLineParams is parameters of getTimeLine operation.
type GetTimeLineParams struct {
	TalkSessionID string
}

func unpackGetTimeLineParams(packed middleware.Parameters) (params GetTimeLineParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodeGetTimeLineParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTimeLineParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetUserByDisplayIDParams is parameters of getUserByDisplayID operation.
type GetUserByDisplayIDParams struct {
	DisplayID string
}

func unpackGetUserByDisplayIDParams(packed middleware.Parameters) (params GetUserByDisplayIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "displayID",
			In:   "path",
		}
		params.DisplayID = packed[key].(string)
	}
	return params
}

func decodeGetUserByDisplayIDParams(args [1]string, argsEscaped bool, r *http.Request) (params GetUserByDisplayIDParams, _ error) {
	// Decode path: displayID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "displayID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DisplayID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "displayID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetUserListManageParams is parameters of getUserListManage operation.
type GetUserListManageParams struct {
	Offset  OptInt32
	Limit   OptInt32
	Search  OptString
	OrderBy OptGetUserListManageOrderBy
	Order   OptGetUserListManageOrder
}

func unpackGetUserListManageParams(packed middleware.Parameters) (params GetUserListManageParams) {
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "search",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Search = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "orderBy",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.OrderBy = v.(OptGetUserListManageOrderBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Order = v.(OptGetUserListManageOrder)
		}
	}
	return params
}

func decodeGetUserListManageParams(args [0]string, argsEscaped bool, r *http.Request) (params GetUserListManageParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: search.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "search",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSearchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSearchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Search.SetTo(paramsDotSearchVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "search",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: orderBy.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "orderBy",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderByVal GetUserListManageOrderBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderByVal = GetUserListManageOrderBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.OrderBy.SetTo(paramsDotOrderByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.OrderBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "orderBy",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "order",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderVal GetUserListManageOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderVal = GetUserListManageOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Order.SetTo(paramsDotOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Order.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "order",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetUserStatsListManageParams is parameters of getUserStatsListManage operation.
type GetUserStatsListManageParams struct {
	Range  string
	Offset OptInt32
	Limit  OptInt32
}

func unpackGetUserStatsListManageParams(packed middleware.Parameters) (params GetUserStatsListManageParams) {
	{
		key := middleware.ParameterKey{
			Name: "range",
			In:   "query",
		}
		params.Range = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	return params
}

func decodeGetUserStatsListManageParams(args [0]string, argsEscaped bool, r *http.Request) (params GetUserStatsListManageParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: range.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "range",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Range = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "range",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// HandleAuthCallbackParams is parameters of handleAuthCallback operation.
type HandleAuthCallbackParams struct {
	Provider string
	Code     string
	// OAuth State from Query.
	State string
}

func unpackHandleAuthCallbackParams(packed middleware.Parameters) (params HandleAuthCallbackParams) {
	{
		key := middleware.ParameterKey{
			Name: "provider",
			In:   "path",
		}
		params.Provider = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "code",
			In:   "query",
		}
		params.Code = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "state",
			In:   "query",
		}
		params.State = packed[key].(string)
	}
	return params
}

func decodeHandleAuthCallbackParams(args [1]string, argsEscaped bool, r *http.Request) (params HandleAuthCallbackParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: provider.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "provider",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Provider = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "provider",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: code.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "code",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Code = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "code",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: state.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.State = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// HasConsentParams is parameters of hasConsent operation.
type HasConsentParams struct {
	TalkSessionID string
}

func unpackHasConsentParams(packed middleware.Parameters) (params HasConsentParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodeHasConsentParams(args [1]string, argsEscaped bool, r *http.Request) (params HasConsentParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ManageRegenerateManageParams is parameters of manageRegenerateManage operation.
type ManageRegenerateManageParams struct {
	TalkSessionID string
}

func unpackManageRegenerateManageParams(packed middleware.Parameters) (params ManageRegenerateManageParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodeManageRegenerateManageParams(args [1]string, argsEscaped bool, r *http.Request) (params ManageRegenerateManageParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// OpinionComments2Params is parameters of opinionComments2 operation.
type OpinionComments2Params struct {
	// 親意見のID.
	OpinionID string
}

func unpackOpinionComments2Params(packed middleware.Parameters) (params OpinionComments2Params) {
	{
		key := middleware.ParameterKey{
			Name: "opinionID",
			In:   "path",
		}
		params.OpinionID = packed[key].(string)
	}
	return params
}

func decodeOpinionComments2Params(args [1]string, argsEscaped bool, r *http.Request) (params OpinionComments2Params, _ error) {
	// Decode path: opinionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "opinionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OpinionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "opinionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// OpinionsHistoryParams is parameters of opinionsHistory operation.
type OpinionsHistoryParams struct {
	// ソートきー.
	Sort   OptNilOpinionsHistorySort
	Limit  OptInt
	Offset OptInt
}

func unpackOpinionsHistoryParams(packed middleware.Parameters) (params OpinionsHistoryParams) {
	{
		key := middleware.ParameterKey{
			Name: "sort",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Sort = v.(OptNilOpinionsHistorySort)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	return params
}

func decodeOpinionsHistoryParams(args [0]string, argsEscaped bool, r *http.Request) (params OpinionsHistoryParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: sort.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal OpinionsHistorySort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = OpinionsHistorySort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Sort.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// PostConclusionParams is parameters of postConclusion operation.
type PostConclusionParams struct {
	TalkSessionID string
}

func unpackPostConclusionParams(packed middleware.Parameters) (params PostConclusionParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodePostConclusionParams(args [1]string, argsEscaped bool, r *http.Request) (params PostConclusionParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PostTimeLineItemParams is parameters of postTimeLineItem operation.
type PostTimeLineItemParams struct {
	TalkSessionID string
}

func unpackPostTimeLineItemParams(packed middleware.Parameters) (params PostTimeLineItemParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodePostTimeLineItemParams(args [1]string, argsEscaped bool, r *http.Request) (params PostTimeLineItemParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ReportOpinionParams is parameters of reportOpinion operation.
type ReportOpinionParams struct {
	OpinionID string
}

func unpackReportOpinionParams(packed middleware.Parameters) (params ReportOpinionParams) {
	{
		key := middleware.ParameterKey{
			Name: "opinionID",
			In:   "path",
		}
		params.OpinionID = packed[key].(string)
	}
	return params
}

func decodeReportOpinionParams(args [1]string, argsEscaped bool, r *http.Request) (params ReportOpinionParams, _ error) {
	// Decode path: opinionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "opinionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OpinionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "opinionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SessionsHistoryParams is parameters of sessionsHistory operation.
type SessionsHistoryParams struct {
	Limit  OptInt
	Offset OptInt
	// テーマ.
	Theme  OptNilString
	Status OptNilSessionsHistoryStatus
}

func unpackSessionsHistoryParams(packed middleware.Parameters) (params SessionsHistoryParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "theme",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Theme = v.(OptNilString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Status = v.(OptNilSessionsHistoryStatus)
		}
	}
	return params
}

func decodeSessionsHistoryParams(args [0]string, argsEscaped bool, r *http.Request) (params SessionsHistoryParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: theme.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "theme",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotThemeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotThemeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Theme.SetTo(paramsDotThemeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "theme",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal SessionsHistoryStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = SessionsHistoryStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Status.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SolveOpinionReportParams is parameters of solveOpinionReport operation.
type SolveOpinionReportParams struct {
	OpinionID string
}

func unpackSolveOpinionReportParams(packed middleware.Parameters) (params SolveOpinionReportParams) {
	{
		key := middleware.ParameterKey{
			Name: "opinionID",
			In:   "path",
		}
		params.OpinionID = packed[key].(string)
	}
	return params
}

func decodeSolveOpinionReportParams(args [1]string, argsEscaped bool, r *http.Request) (params SolveOpinionReportParams, _ error) {
	// Decode path: opinionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "opinionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OpinionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "opinionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SwipeOpinionsParams is parameters of swipeOpinions operation.
type SwipeOpinionsParams struct {
	TalkSessionID string
	Limit         OptNilInt
}

func unpackSwipeOpinionsParams(packed middleware.Parameters) (params SwipeOpinionsParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptNilInt)
		}
	}
	return params
}

func decodeSwipeOpinionsParams(args [1]string, argsEscaped bool, r *http.Request) (params SwipeOpinionsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(10)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SwitchOrganizationParams is parameters of switchOrganization operation.
type SwitchOrganizationParams struct {
	Code string
}

func unpackSwitchOrganizationParams(packed middleware.Parameters) (params SwitchOrganizationParams) {
	{
		key := middleware.ParameterKey{
			Name: "code",
			In:   "path",
		}
		params.Code = packed[key].(string)
	}
	return params
}

func decodeSwitchOrganizationParams(args [1]string, argsEscaped bool, r *http.Request) (params SwitchOrganizationParams, _ error) {
	// Decode path: code.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "code",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Code = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "code",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TalkSessionAnalysisParams is parameters of talkSessionAnalysis operation.
type TalkSessionAnalysisParams struct {
	TalkSessionID string
}

func unpackTalkSessionAnalysisParams(packed middleware.Parameters) (params TalkSessionAnalysisParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodeTalkSessionAnalysisParams(args [1]string, argsEscaped bool, r *http.Request) (params TalkSessionAnalysisParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ToggleReportVisibilityManageParams is parameters of toggleReportVisibilityManage operation.
type ToggleReportVisibilityManageParams struct {
	TalkSessionID string
}

func unpackToggleReportVisibilityManageParams(packed middleware.Parameters) (params ToggleReportVisibilityManageParams) {
	{
		key := middleware.ParameterKey{
			Name: "talkSessionID",
			In:   "path",
		}
		params.TalkSessionID = packed[key].(string)
	}
	return params
}

func decodeToggleReportVisibilityManageParams(args [1]string, argsEscaped bool, r *http.Request) (params ToggleReportVisibilityManageParams, _ error) {
	// Decode path: talkSessionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "talkSessionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TalkSessionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "talkSessionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateOrganizationParams is parameters of updateOrganization operation.
type UpdateOrganizationParams struct {
	Code string
}

func unpackUpdateOrganizationParams(packed middleware.Parameters) (params UpdateOrganizationParams) {
	{
		key := middleware.ParameterKey{
			Name: "code",
			In:   "path",
		}
		params.Code = packed[key].(string)
	}
	return params
}

func decodeUpdateOrganizationParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateOrganizationParams, _ error) {
	// Decode path: code.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "code",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Code = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "code",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ValidateOrganizationCodeParams is parameters of validateOrganizationCode operation.
type ValidateOrganizationCodeParams struct {
	Code string
}

func unpackValidateOrganizationCodeParams(packed middleware.Parameters) (params ValidateOrganizationCodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "code",
			In:   "path",
		}
		params.Code = packed[key].(string)
	}
	return params
}

func decodeValidateOrganizationCodeParams(args [1]string, argsEscaped bool, r *http.Request) (params ValidateOrganizationCodeParams, _ error) {
	// Decode path: code.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "code",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Code = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "code",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// Vote2Params is parameters of vote2 operation.
type Vote2Params struct {
	// 意見のID.
	OpinionID string
}

func unpackVote2Params(packed middleware.Parameters) (params Vote2Params) {
	{
		key := middleware.ParameterKey{
			Name: "opinionID",
			In:   "path",
		}
		params.OpinionID = packed[key].(string)
	}
	return params
}

func decodeVote2Params(args [1]string, argsEscaped bool, r *http.Request) (params Vote2Params, _ error) {
	// Decode path: opinionID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "opinionID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OpinionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "opinionID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
