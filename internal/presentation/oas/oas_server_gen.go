// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	AuthHandler
	HealthHandler
	ImageHandler
	ManageHandler
	OpinionHandler
	OrganizationHandler
	PolicyHandler
	TalkSessionHandler
	TestHandler
	TimelineHandler
	UserHandler
	VoteHandler
}

// AuthHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Auth
type AuthHandler interface {
	// AuthAccountDetach implements authAccountDetach operation.
	//
	// そのアカウントには再度ログインできなくなります。ログインしたければ言ってね！.
	//
	// DELETE /auth/dev/detach
	AuthAccountDetach(ctx context.Context) (AuthAccountDetachRes, error)
	// Authorize implements authorize operation.
	//
	// ログイン.
	//
	// GET /auth/{provider}/login
	Authorize(ctx context.Context, params AuthorizeParams) (AuthorizeRes, error)
	// ChangePassword implements changePassword operation.
	//
	// パスワード変更.
	//
	// PUT /auth/password/change
	ChangePassword(ctx context.Context, params ChangePasswordParams) (ChangePasswordRes, error)
	// DevAuthorize implements devAuthorize operation.
	//
	// 開発用登録/ログイン.
	//
	// GET /auth/dev/login
	DevAuthorize(ctx context.Context, params DevAuthorizeParams) (DevAuthorizeRes, error)
	// GetTokenInfo implements getTokenInfo operation.
	//
	// JWTの内容を返してくれる.
	//
	// GET /auth/token/info
	GetTokenInfo(ctx context.Context) (GetTokenInfoRes, error)
	// HandleAuthCallback implements handleAuthCallback operation.
	//
	// Auth Callback.
	//
	// GET /auth/{provider}/callback
	HandleAuthCallback(ctx context.Context, params HandleAuthCallbackParams) (HandleAuthCallbackRes, error)
	// PasswordLogin implements passwordLogin operation.
	//
	// パスワードによるログイン.
	//
	// POST /auth/password/login
	PasswordLogin(ctx context.Context, req *PasswordLoginReq) (PasswordLoginRes, error)
	// PasswordRegister implements passwordRegister operation.
	//
	// パスワードによる登録（devのみ）.
	//
	// POST /auth/password/register
	PasswordRegister(ctx context.Context, req *PasswordRegisterReq) (PasswordRegisterRes, error)
	// RevokeToken implements revokeToken operation.
	//
	// トークンを失効（ログアウト）.
	//
	// POST /auth/revoke
	RevokeToken(ctx context.Context) (RevokeTokenRes, error)
}

// HealthHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Health
type HealthHandler interface {
	// Health implements health operation.
	//
	// ヘルスチェック.
	//
	// GET /health
	Health(ctx context.Context) (HealthRes, error)
}

// ImageHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Image
type ImageHandler interface {
	// PostImage implements postImage operation.
	//
	// 画像を投稿してURLを返すAPI.
	//
	// POST /images
	PostImage(ctx context.Context, req *PostImageReq) (PostImageRes, error)
}

// ManageHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Manage
type ManageHandler interface {
	// GetAnalysisReportManage implements getAnalysisReportManage operation.
	//
	// GET /v1/manage/talksessions/{talkSessionID}/analysis/report
	GetAnalysisReportManage(ctx context.Context, params GetAnalysisReportManageParams) (*AnalysisReportResponse, error)
	// GetTalkSessionListManage implements getTalkSessionListManage operation.
	//
	// GET /v1/manage/talksessions/list
	GetTalkSessionListManage(ctx context.Context, params GetTalkSessionListManageParams) (*TalkSessionListResponse, error)
	// GetTalkSessionManage implements getTalkSessionManage operation.
	//
	// GET /v1/manage/talksessions/{talkSessionID}
	GetTalkSessionManage(ctx context.Context, params GetTalkSessionManageParams) (*TalkSessionForManage, error)
	// GetUserListManage implements getUserListManage operation.
	//
	// GET /v1/manage/users/list
	GetUserListManage(ctx context.Context, params GetUserListManageParams) ([]UserForManage, error)
	// GetUserStatsListManage implements getUserStatsListManage operation.
	//
	// GET /v1/manage/users/stats/list
	GetUserStatsListManage(ctx context.Context, params GetUserStatsListManageParams) ([]UserStatsResponse, error)
	// GetUserStatsTotalManage implements getUserStatsTotalManage operation.
	//
	// GET /v1/manage/users/stats/total
	GetUserStatsTotalManage(ctx context.Context) (*UserStatsResponse, error)
	// ManageRegenerateManage implements manageRegenerateManage operation.
	//
	// POST /v1/manage/talksessions/{talkSessionID}/analysis/regenerate
	ManageRegenerateManage(ctx context.Context, req *RegenerateRequest, params ManageRegenerateManageParams) (*RegenerateResponse, error)
	// ToggleReportVisibilityManage implements toggleReportVisibilityManage operation.
	//
	// POST /v1/manage/talksessions/{talkSessionID}/analysis/report
	ToggleReportVisibilityManage(ctx context.Context, req *ToggleReportVisibilityRequest, params ToggleReportVisibilityManageParams) (*ToggleReportVisibilityResponse, error)
}

// OpinionHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Opinion
type OpinionHandler interface {
	// GetOpinionAnalysis implements getOpinionAnalysis operation.
	//
	// 意見に投票したグループごとの割合.
	//
	// GET /opinions/{opinionID}/analysis
	GetOpinionAnalysis(ctx context.Context, params GetOpinionAnalysisParams) (GetOpinionAnalysisRes, error)
	// GetOpinionDetail2 implements getOpinionDetail2 operation.
	//
	// 意見詳細.
	//
	// GET /opinions/{opinionID}
	GetOpinionDetail2(ctx context.Context, params GetOpinionDetail2Params) (GetOpinionDetail2Res, error)
	// GetOpinionReportReasons implements getOpinionReportReasons operation.
	//
	// 意見への通報理由一覧.
	//
	// GET /opinions/report_reasons
	GetOpinionReportReasons(ctx context.Context) (GetOpinionReportReasonsRes, error)
	// GetOpinionReports implements getOpinionReports operation.
	//
	// セッション作成者しか取得できない.
	//
	// GET /opinions/{opinionID}/reports
	GetOpinionReports(ctx context.Context, params GetOpinionReportsParams) (GetOpinionReportsRes, error)
	// GetOpinionsForTalkSession implements getOpinionsForTalkSession operation.
	//
	// セッションに対する意見一覧.
	//
	// GET /talksessions/{talkSessionID}/opinions
	GetOpinionsForTalkSession(ctx context.Context, params GetOpinionsForTalkSessionParams) (GetOpinionsForTalkSessionRes, error)
	// OpinionComments2 implements opinionComments2 operation.
	//
	// 意見に対するリプライ意見一覧.
	//
	// GET /opinions/{opinionID}/replies
	OpinionComments2(ctx context.Context, params OpinionComments2Params) (OpinionComments2Res, error)
	// PostOpinionPost2 implements postOpinionPost2 operation.
	//
	// ParentOpinionIDがなければルートの意見として投稿される
	// parentOpinionIDがない場合はtalkSessionIDが必須
	// セッション管理者はisSeedをtrueにするとシード意見として投稿できる.
	//
	// POST /opinions
	PostOpinionPost2(ctx context.Context, req *PostOpinionPost2Req) (PostOpinionPost2Res, error)
	// ReportOpinion implements reportOpinion operation.
	//
	// 意見通報API.
	//
	// POST /opinions/{opinionID}/report
	ReportOpinion(ctx context.Context, req *ReportOpinionReq, params ReportOpinionParams) (ReportOpinionRes, error)
	// SolveOpinionReport implements solveOpinionReport operation.
	//
	// 通報を解決.
	//
	// POST /opinions/{opinionID}/reports/solve
	SolveOpinionReport(ctx context.Context, req *SolveOpinionReportReq, params SolveOpinionReportParams) (SolveOpinionReportRes, error)
	// SwipeOpinions implements swipeOpinions operation.
	//
	// セッションの中からまだ投票していない意見をランダムに取得する
	// remainingCountは取得した意見を含めてスワイプできる意見の総数を返す.
	//
	// GET /talksessions/{talkSessionID}/swipe_opinions
	SwipeOpinions(ctx context.Context, params SwipeOpinionsParams) (SwipeOpinionsRes, error)
}

// OrganizationHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Organization
type OrganizationHandler interface {
	// CreateOrganizationAlias implements createOrganizationAlias operation.
	//
	// 組織エイリアス作成.
	//
	// POST /organizations/{organizationID}/aliases
	CreateOrganizationAlias(ctx context.Context, req *CreateOrganizationAliasReq, params CreateOrganizationAliasParams) (CreateOrganizationAliasRes, error)
	// DeleteOrganizationAlias implements deleteOrganizationAlias operation.
	//
	// 組織エイリアス削除.
	//
	// DELETE /organizations/{organizationID}/aliases/{aliasID}
	DeleteOrganizationAlias(ctx context.Context, params DeleteOrganizationAliasParams) (DeleteOrganizationAliasRes, error)
	// EstablishOrganization implements establishOrganization operation.
	//
	// 組織を作成できる。
	// これを作れるユーザーはDBを直接叩いて作るしかない。.
	//
	// POST /organizations
	EstablishOrganization(ctx context.Context, req *EstablishOrganizationReq) (EstablishOrganizationRes, error)
	// GetOrganizationAliases implements getOrganizationAliases operation.
	//
	// 組織エイリアス一覧取得.
	//
	// GET /organizations/{organizationID}/aliases
	GetOrganizationAliases(ctx context.Context, params GetOrganizationAliasesParams) (GetOrganizationAliasesRes, error)
	// GetOrganizations implements getOrganizations operation.
	//
	// 所属組織一覧.
	//
	// GET /organizations
	GetOrganizations(ctx context.Context) (GetOrganizationsRes, error)
	// InviteOrganization implements inviteOrganization operation.
	//
	// Role
	// - 10: SuperAdmin
	// - 20: Owner
	// - 30: Admin
	// - 40: Member.
	//
	// POST /organizations/{organizationID}/invite
	InviteOrganization(ctx context.Context, req *InviteOrganizationReq, params InviteOrganizationParams) (InviteOrganizationRes, error)
	// InviteOrganizationForUser implements inviteOrganizationForUser operation.
	//
	// 組織にユーザーを追加.
	//
	// POST /organizations/{organizationID}/invite_user
	InviteOrganizationForUser(ctx context.Context, req *InviteOrganizationForUserReq, params InviteOrganizationForUserParams) (InviteOrganizationForUserRes, error)
	// ValidateOrganizationCode implements validateOrganizationCode operation.
	//
	// 組織コード検証.
	//
	// GET /auth/organization/{code}/validate
	ValidateOrganizationCode(ctx context.Context, params ValidateOrganizationCodeParams) (ValidateOrganizationCodeRes, error)
}

// PolicyHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Policy
type PolicyHandler interface {
	// GetPolicyConsentStatus implements getPolicyConsentStatus operation.
	//
	// 最新のポリシーに同意したかを取得.
	//
	// GET /policy/consent
	GetPolicyConsentStatus(ctx context.Context) (GetPolicyConsentStatusRes, error)
	// PolicyConsent implements policyConsent operation.
	//
	// 最新のポリシーに同意する.
	//
	// POST /policy/consent
	PolicyConsent(ctx context.Context, req *PolicyConsentReq) (PolicyConsentRes, error)
}

// TalkSessionHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: TalkSession
type TalkSessionHandler interface {
	// ConsentTalkSession implements consentTalkSession operation.
	//
	// セッションへの同意.
	//
	// POST /talksessions/{talkSessionID}/consent
	ConsentTalkSession(ctx context.Context, params ConsentTalkSessionParams) (ConsentTalkSessionRes, error)
	// EditTalkSession implements editTalkSession operation.
	//
	// セッション編集.
	//
	// PUT /talksessions/{talkSessionID}
	EditTalkSession(ctx context.Context, req *EditTalkSessionReq, params EditTalkSessionParams) (EditTalkSessionRes, error)
	// GetConclusion implements getConclusion operation.
	//
	// 結論取得.
	//
	// GET /talksessions/{talkSessionID}/conclusion
	GetConclusion(ctx context.Context, params GetConclusionParams) (GetConclusionRes, error)
	// GetOpenedTalkSession implements getOpenedTalkSession operation.
	//
	// 自分が開いたセッション一覧.
	//
	// GET /talksessions/opened
	GetOpenedTalkSession(ctx context.Context, params GetOpenedTalkSessionParams) (GetOpenedTalkSessionRes, error)
	// GetReportsForTalkSession implements getReportsForTalkSession operation.
	//
	// 通報一覧.
	//
	// GET /talksessions/{talkSessionID}/reports
	GetReportsForTalkSession(ctx context.Context, params GetReportsForTalkSessionParams) (GetReportsForTalkSessionRes, error)
	// GetTalkSessionDetail implements getTalkSessionDetail operation.
	//
	// トークセッションの詳細.
	//
	// GET /talksessions/{talkSessionID}
	GetTalkSessionDetail(ctx context.Context, params GetTalkSessionDetailParams) (GetTalkSessionDetailRes, error)
	// GetTalkSessionList implements getTalkSessionList operation.
	//
	// セッション一覧.
	//
	// GET /talksessions
	GetTalkSessionList(ctx context.Context, params GetTalkSessionListParams) (GetTalkSessionListRes, error)
	// GetTalkSessionReport implements getTalkSessionReport operation.
	//
	// セッションレポートを返す.
	//
	// GET /talksessions/{talkSessionID}/report
	GetTalkSessionReport(ctx context.Context, params GetTalkSessionReportParams) (GetTalkSessionReportRes, error)
	// GetTalkSessionReportCount implements getTalkSessionReportCount operation.
	//
	// 通報件数.
	//
	// GET /talksessions/{talkSessionID}/reports/count
	GetTalkSessionReportCount(ctx context.Context, params GetTalkSessionReportCountParams) (GetTalkSessionReportCountRes, error)
	// GetTalkSessionRestrictionKeys implements getTalkSessionRestrictionKeys operation.
	//
	// セッションの投稿制限に使用できるキーの一覧を返す.
	//
	// GET /talksessions/restrictions
	GetTalkSessionRestrictionKeys(ctx context.Context) (GetTalkSessionRestrictionKeysRes, error)
	// GetTalkSessionRestrictionSatisfied implements getTalkSessionRestrictionSatisfied operation.
	//
	// 特定のセッションで満たしていない条件があれば返す.
	//
	// GET /talksessions/{talkSessionID}/restrictions
	GetTalkSessionRestrictionSatisfied(ctx context.Context, params GetTalkSessionRestrictionSatisfiedParams) (GetTalkSessionRestrictionSatisfiedRes, error)
	// HasConsent implements hasConsent operation.
	//
	// セッションに同意しているか.
	//
	// GET /talksessions/{talkSessionID}/consent
	HasConsent(ctx context.Context, params HasConsentParams) (HasConsentRes, error)
	// InitiateTalkSession implements initiateTalkSession operation.
	//
	// ## サムネイル画像について
	// - `Description中に出てくる画像で一番最初のものを使用`。
	// - 画像自体は`POST /images`でサーバにポストしたものを使用してください。
	// ## 投稿制限のキーについて
	// restrictionsに値を入れると一定のデモグラ情報を登録していない限り、セッションへの投稿が制限されるようにできる。
	// restrictionsには [GET /talksessions/restrictions](https://app.apidog.
	// com/link/project/674502/apis/api-14271260)
	// より取れるkeyをカンマ区切りで入力してください。.
	//
	// POST /talksessions
	InitiateTalkSession(ctx context.Context, req *InitiateTalkSessionReq) (InitiateTalkSessionRes, error)
	// PostConclusion implements postConclusion operation.
	//
	// 結論（conclusion）はセッションが終了した後にセッっションの作成者が投稿できる文章。
	// セッションの流れやグループの分かれ方などに対するセッション作成者の感想やそれらの意見を受け、これからの方向性などを記入する。.
	//
	// POST /talksessions/{talkSessionID}/conclusion
	PostConclusion(ctx context.Context, req *PostConclusionReq, params PostConclusionParams) (PostConclusionRes, error)
	// TalkSessionAnalysis implements talkSessionAnalysis operation.
	//
	// 分析結果一覧.
	//
	// GET /talksessions/{talkSessionID}/analysis
	TalkSessionAnalysis(ctx context.Context, params TalkSessionAnalysisParams) (TalkSessionAnalysisRes, error)
}

// TestHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Test
type TestHandler interface {
	// DummiInit implements dummiInit operation.
	//
	// Mudai.
	//
	// POST /test/dummy
	DummiInit(ctx context.Context) (DummiInitRes, error)
	// Test implements test operation.
	//
	// OpenAPIテスト用.
	//
	// GET /test
	Test(ctx context.Context) (TestRes, error)
}

// TimelineHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Timeline
type TimelineHandler interface {
	// EditTimeLine implements editTimeLine operation.
	//
	// タイムライン編集.
	//
	// PUT /talksessions/{talkSessionID}/timelines/{actionItemID}
	EditTimeLine(ctx context.Context, req *EditTimeLineReq, params EditTimeLineParams) (EditTimeLineRes, error)
	// GetTimeLine implements getTimeLine operation.
	//
	// タイムラインはセッション終了後にセッション作成者が設定できるその後の予定を知らせるもの.
	//
	// GET /talksessions/{talkSessionID}/timelines
	GetTimeLine(ctx context.Context, params GetTimeLineParams) (GetTimeLineRes, error)
	// PostTimeLineItem implements postTimeLineItem operation.
	//
	// タイムラインアイテム追加.
	//
	// POST /talksessions/{talkSessionID}/timeline
	PostTimeLineItem(ctx context.Context, req *PostTimeLineItemReq, params PostTimeLineItemParams) (PostTimeLineItemRes, error)
}

// UserHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: User
type UserHandler interface {
	// EstablishUser implements establishUser operation.
	//
	// ユーザー作成.
	//
	// POST /user
	EstablishUser(ctx context.Context, req *EstablishUserReq) (EstablishUserRes, error)
	// GetUserInfo implements getUserInfo operation.
	//
	// ユーザー情報の取得.
	//
	// GET /user
	GetUserInfo(ctx context.Context) (GetUserInfoRes, error)
	// OpinionsHistory implements opinionsHistory operation.
	//
	// 今までに投稿した意見.
	//
	// GET /opinions/histories
	OpinionsHistory(ctx context.Context, params OpinionsHistoryParams) (OpinionsHistoryRes, error)
	// SessionsHistory implements sessionsHistory operation.
	//
	// リアクション済みのセッション一覧.
	//
	// GET /talksessions/histories
	SessionsHistory(ctx context.Context, params SessionsHistoryParams) (SessionsHistoryRes, error)
	// UpdateUserProfile implements updateUserProfile operation.
	//
	// ユーザー情報の変更.
	//
	// PUT /user
	UpdateUserProfile(ctx context.Context, req *UpdateUserProfileReq) (UpdateUserProfileRes, error)
}

// VoteHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Vote
type VoteHandler interface {
	// Vote2 implements vote2 operation.
	//
	// 意思表明API.
	//
	// POST /opinions/{opinionID}/votes
	Vote2(ctx context.Context, req *Vote2Req, params Vote2Params) (Vote2Res, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
