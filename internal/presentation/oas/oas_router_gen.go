// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "dev/"
					origElem := elem
					if l := len("dev/"); len(elem) >= l && elem[0:l] == "dev/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'd': // Prefix: "detach"
						origElem := elem
						if l := len("detach"); len(elem) >= l && elem[0:l] == "detach" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleAuthAccountDetachRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE")
							}

							return
						}

						elem = origElem
					case 'l': // Prefix: "login"
						origElem := elem
						if l := len("login"); len(elem) >= l && elem[0:l] == "login" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleDevAuthorizeRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'p': // Prefix: "password/"
					origElem := elem
					if l := len("password/"); len(elem) >= l && elem[0:l] == "password/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "change"
						origElem := elem
						if l := len("change"); len(elem) >= l && elem[0:l] == "change" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "PUT":
								s.handleChangePasswordRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "PUT")
							}

							return
						}

						elem = origElem
					case 'l': // Prefix: "login"
						origElem := elem
						if l := len("login"); len(elem) >= l && elem[0:l] == "login" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handlePasswordLoginRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'r': // Prefix: "register"
						origElem := elem
						if l := len("register"); len(elem) >= l && elem[0:l] == "register" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handlePasswordRegisterRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "revoke"
					origElem := elem
					if l := len("revoke"); len(elem) >= l && elem[0:l] == "revoke" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleRevokeTokenRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 't': // Prefix: "token/info"
					origElem := elem
					if l := len("token/info"); len(elem) >= l && elem[0:l] == "token/info" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetTokenInfoRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}
				// Param: "provider"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "callback"
						origElem := elem
						if l := len("callback"); len(elem) >= l && elem[0:l] == "callback" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleHandleAuthCallbackRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 'l': // Prefix: "login"
						origElem := elem
						if l := len("login"); len(elem) >= l && elem[0:l] == "login" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAuthorizeRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'h': // Prefix: "health"
				origElem := elem
				if l := len("health"); len(elem) >= l && elem[0:l] == "health" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleHealthRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'i': // Prefix: "images"
				origElem := elem
				if l := len("images"); len(elem) >= l && elem[0:l] == "images" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handlePostImageRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

				elem = origElem
			case 'n': // Prefix: "notifications/"
				origElem := elem
				if l := len("notifications/"); len(elem) >= l && elem[0:l] == "notifications/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "devices"
					origElem := elem
					if l := len("devices"); len(elem) >= l && elem[0:l] == "devices" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetDevicesRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleRegisterDeviceRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "exists"
							origElem := elem
							if l := len("exists"); len(elem) >= l && elem[0:l] == "exists" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleCheckDeviceExistsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}
						// Param: "deviceId"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteDeviceRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'p': // Prefix: "preferences"
					origElem := elem
					if l := len("preferences"); len(elem) >= l && elem[0:l] == "preferences" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetNotificationPreferencesRequest([0]string{}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateNotificationPreferencesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PUT")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'o': // Prefix: "o"
				origElem := elem
				if l := len("o"); len(elem) >= l && elem[0:l] == "o" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "pinions"
					origElem := elem
					if l := len("pinions"); len(elem) >= l && elem[0:l] == "pinions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handlePostOpinionPost2Request([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'h': // Prefix: "histories"
							origElem := elem
							if l := len("histories"); len(elem) >= l && elem[0:l] == "histories" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleOpinionsHistoryRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'r': // Prefix: "report_reasons"
							origElem := elem
							if l := len("report_reasons"); len(elem) >= l && elem[0:l] == "report_reasons" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetOpinionReportReasonsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}
						// Param: "opinionID"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetOpinionDetail2Request([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "analysis"
								origElem := elem
								if l := len("analysis"); len(elem) >= l && elem[0:l] == "analysis" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetOpinionAnalysisRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'r': // Prefix: "rep"
								origElem := elem
								if l := len("rep"); len(elem) >= l && elem[0:l] == "rep" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'l': // Prefix: "lies"
									origElem := elem
									if l := len("lies"); len(elem) >= l && elem[0:l] == "lies" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleOpinionComments2Request([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 'o': // Prefix: "ort"
									origElem := elem
									if l := len("ort"); len(elem) >= l && elem[0:l] == "ort" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleReportOpinionRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case 's': // Prefix: "s"
										origElem := elem
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleGetOpinionReportsRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/solve"
											origElem := elem
											if l := len("/solve"); len(elem) >= l && elem[0:l] == "/solve" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleSolveOpinionReportRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'v': // Prefix: "votes"
								origElem := elem
								if l := len("votes"); len(elem) >= l && elem[0:l] == "votes" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleVote2Request([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "rganization"
					origElem := elem
					if l := len("rganization"); len(elem) >= l && elem[0:l] == "rganization" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "code"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/validate"
							origElem := elem
							if l := len("/validate"); len(elem) >= l && elem[0:l] == "/validate" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleValidateOrganizationCodeRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 's': // Prefix: "s"
						origElem := elem
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetOrganizationsRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleEstablishOrganizationRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "aliases"
								origElem := elem
								if l := len("aliases"); len(elem) >= l && elem[0:l] == "aliases" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetOrganizationAliasesRequest([0]string{}, elemIsEscaped, w, r)
									case "POST":
										s.handleCreateOrganizationAliasRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "aliasID"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleDeleteOrganizationAliasRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'i': // Prefix: "invite"
								origElem := elem
								if l := len("invite"); len(elem) >= l && elem[0:l] == "invite" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleInviteOrganizationRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_user"
									origElem := elem
									if l := len("_user"); len(elem) >= l && elem[0:l] == "_user" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleInviteOrganizationForUserRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'u': // Prefix: "users"
								origElem := elem
								if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetOrganizationUsersRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'p': // Prefix: "policy/consent"
				origElem := elem
				if l := len("policy/consent"); len(elem) >= l && elem[0:l] == "policy/consent" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetPolicyConsentStatusRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handlePolicyConsentRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}

				elem = origElem
			case 'r': // Prefix: "report/feedback"
				origElem := elem
				if l := len("report/feedback"); len(elem) >= l && elem[0:l] == "report/feedback" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleApplyFeedbackToReportRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

				elem = origElem
			case 't': // Prefix: "t"
				origElem := elem
				if l := len("t"); len(elem) >= l && elem[0:l] == "t" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "alksessions"
					origElem := elem
					if l := len("alksessions"); len(elem) >= l && elem[0:l] == "alksessions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetTalkSessionListRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleInitiateTalkSessionRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'h': // Prefix: "histories"
							origElem := elem
							if l := len("histories"); len(elem) >= l && elem[0:l] == "histories" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleSessionsHistoryRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'o': // Prefix: "opened"
							origElem := elem
							if l := len("opened"); len(elem) >= l && elem[0:l] == "opened" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetOpenedTalkSessionRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'r': // Prefix: "restrictions"
							origElem := elem
							if l := len("restrictions"); len(elem) >= l && elem[0:l] == "restrictions" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetTalkSessionRestrictionKeysRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}
						// Param: "talkSessionID"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetTalkSessionDetailRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleEditTalkSessionRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "analysis"
								origElem := elem
								if l := len("analysis"); len(elem) >= l && elem[0:l] == "analysis" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleTalkSessionAnalysisRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'c': // Prefix: "con"
								origElem := elem
								if l := len("con"); len(elem) >= l && elem[0:l] == "con" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "clusion"
									origElem := elem
									if l := len("clusion"); len(elem) >= l && elem[0:l] == "clusion" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetConclusionRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										case "POST":
											s.handlePostConclusionRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET,POST")
										}

										return
									}

									elem = origElem
								case 's': // Prefix: "sent"
									origElem := elem
									if l := len("sent"); len(elem) >= l && elem[0:l] == "sent" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleHasConsentRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										case "POST":
											s.handleConsentTalkSessionRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET,POST")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'o': // Prefix: "opinions"
								origElem := elem
								if l := len("opinions"); len(elem) >= l && elem[0:l] == "opinions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetOpinionsForTalkSessionRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'r': // Prefix: "re"
								origElem := elem
								if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'p': // Prefix: "port"
									origElem := elem
									if l := len("port"); len(elem) >= l && elem[0:l] == "port" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetTalkSessionReportRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 's': // Prefix: "s"
										origElem := elem
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleGetReportsForTalkSessionRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/count"
											origElem := elem
											if l := len("/count"); len(elem) >= l && elem[0:l] == "/count" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleGetTalkSessionReportCountRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								case 's': // Prefix: "strictions"
									origElem := elem
									if l := len("strictions"); len(elem) >= l && elem[0:l] == "strictions" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetTalkSessionRestrictionSatisfiedRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "swipe_opinions"
								origElem := elem
								if l := len("swipe_opinions"); len(elem) >= l && elem[0:l] == "swipe_opinions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleSwipeOpinionsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 't': // Prefix: "timeline"
								origElem := elem
								if l := len("timeline"); len(elem) >= l && elem[0:l] == "timeline" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handlePostTimeLineItemRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case 's': // Prefix: "s"
									origElem := elem
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetTimeLineRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "actionItemID"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "PUT":
												s.handleEditTimeLineRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "PUT")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'e': // Prefix: "est"
					origElem := elem
					if l := len("est"); len(elem) >= l && elem[0:l] == "est" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleTestRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/dummy"
						origElem := elem
						if l := len("/dummy"); len(elem) >= l && elem[0:l] == "/dummy" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleDummiInitRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'u': // Prefix: "user"
				origElem := elem
				if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetUserInfoRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleEstablishUserRequest([0]string{}, elemIsEscaped, w, r)
					case "PUT":
						s.handleUpdateUserProfileRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST,PUT")
					}

					return
				}

				elem = origElem
			case 'v': // Prefix: "v1/manage/"
				origElem := elem
				if l := len("v1/manage/"); len(elem) >= l && elem[0:l] == "v1/manage/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 't': // Prefix: "talksessions/"
					origElem := elem
					if l := len("talksessions/"); len(elem) >= l && elem[0:l] == "talksessions/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'l': // Prefix: "list"
						origElem := elem
						if l := len("list"); len(elem) >= l && elem[0:l] == "list" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetTalkSessionListManageRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}
					// Param: "talkSessionID"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetTalkSessionManageRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/analysis/re"
						origElem := elem
						if l := len("/analysis/re"); len(elem) >= l && elem[0:l] == "/analysis/re" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'g': // Prefix: "generate"
							origElem := elem
							if l := len("generate"); len(elem) >= l && elem[0:l] == "generate" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleManageRegenerateManageRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'p': // Prefix: "port"
							origElem := elem
							if l := len("port"); len(elem) >= l && elem[0:l] == "port" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetAnalysisReportManageRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "POST":
									s.handleToggleReportVisibilityManageRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'u': // Prefix: "users/"
					origElem := elem
					if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'l': // Prefix: "list"
						origElem := elem
						if l := len("list"); len(elem) >= l && elem[0:l] == "list" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetUserListManageRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 's': // Prefix: "stats/"
						origElem := elem
						if l := len("stats/"); len(elem) >= l && elem[0:l] == "stats/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "list"
							origElem := elem
							if l := len("list"); len(elem) >= l && elem[0:l] == "list" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetUserStatsListManageRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 't': // Prefix: "total"
							origElem := elem
							if l := len("total"); len(elem) >= l && elem[0:l] == "total" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetUserStatsTotalManageRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "dev/"
					origElem := elem
					if l := len("dev/"); len(elem) >= l && elem[0:l] == "dev/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'd': // Prefix: "detach"
						origElem := elem
						if l := len("detach"); len(elem) >= l && elem[0:l] == "detach" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "AuthAccountDetach"
								r.summary = "**開発用** 現在のアカウントを切り離す"
								r.operationID = "authAccountDetach"
								r.pathPattern = "/auth/dev/detach"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'l': // Prefix: "login"
						origElem := elem
						if l := len("login"); len(elem) >= l && elem[0:l] == "login" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "DevAuthorize"
								r.summary = "開発用登録/ログイン"
								r.operationID = "devAuthorize"
								r.pathPattern = "/auth/dev/login"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'p': // Prefix: "password/"
					origElem := elem
					if l := len("password/"); len(elem) >= l && elem[0:l] == "password/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "change"
						origElem := elem
						if l := len("change"); len(elem) >= l && elem[0:l] == "change" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "PUT":
								r.name = "ChangePassword"
								r.summary = "パスワード変更"
								r.operationID = "changePassword"
								r.pathPattern = "/auth/password/change"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'l': // Prefix: "login"
						origElem := elem
						if l := len("login"); len(elem) >= l && elem[0:l] == "login" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "PasswordLogin"
								r.summary = "パスワードによるログイン"
								r.operationID = "passwordLogin"
								r.pathPattern = "/auth/password/login"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'r': // Prefix: "register"
						origElem := elem
						if l := len("register"); len(elem) >= l && elem[0:l] == "register" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "PasswordRegister"
								r.summary = "パスワードによる登録（devのみ）"
								r.operationID = "passwordRegister"
								r.pathPattern = "/auth/password/register"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "revoke"
					origElem := elem
					if l := len("revoke"); len(elem) >= l && elem[0:l] == "revoke" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "RevokeToken"
							r.summary = "トークンを失効（ログアウト）"
							r.operationID = "revokeToken"
							r.pathPattern = "/auth/revoke"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 't': // Prefix: "token/info"
					origElem := elem
					if l := len("token/info"); len(elem) >= l && elem[0:l] == "token/info" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetTokenInfo"
							r.summary = "JWTの内容を返してくれる"
							r.operationID = "getTokenInfo"
							r.pathPattern = "/auth/token/info"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}
				// Param: "provider"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "callback"
						origElem := elem
						if l := len("callback"); len(elem) >= l && elem[0:l] == "callback" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "HandleAuthCallback"
								r.summary = "Auth Callback"
								r.operationID = "handleAuthCallback"
								r.pathPattern = "/auth/{provider}/callback"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'l': // Prefix: "login"
						origElem := elem
						if l := len("login"); len(elem) >= l && elem[0:l] == "login" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "Authorize"
								r.summary = "ログイン"
								r.operationID = "authorize"
								r.pathPattern = "/auth/{provider}/login"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'h': // Prefix: "health"
				origElem := elem
				if l := len("health"); len(elem) >= l && elem[0:l] == "health" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = "Health"
						r.summary = "ヘルスチェック"
						r.operationID = "health"
						r.pathPattern = "/health"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'i': // Prefix: "images"
				origElem := elem
				if l := len("images"); len(elem) >= l && elem[0:l] == "images" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = "PostImage"
						r.summary = "画像投稿"
						r.operationID = "postImage"
						r.pathPattern = "/images"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'n': // Prefix: "notifications/"
				origElem := elem
				if l := len("notifications/"); len(elem) >= l && elem[0:l] == "notifications/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "devices"
					origElem := elem
					if l := len("devices"); len(elem) >= l && elem[0:l] == "devices" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetDevices"
							r.summary = "デバイス一覧取得"
							r.operationID = "getDevices"
							r.pathPattern = "/notifications/devices"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "RegisterDevice"
							r.summary = "デバイス登録/更新"
							r.operationID = "registerDevice"
							r.pathPattern = "/notifications/devices"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "exists"
							origElem := elem
							if l := len("exists"); len(elem) >= l && elem[0:l] == "exists" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "CheckDeviceExists"
									r.summary = "デバイストークンが登録されているか確認"
									r.operationID = "checkDeviceExists"
									r.pathPattern = "/notifications/devices/exists"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "deviceId"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "DeleteDevice"
								r.summary = "デバイス削除"
								r.operationID = "deleteDevice"
								r.pathPattern = "/notifications/devices/{deviceId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'p': // Prefix: "preferences"
					origElem := elem
					if l := len("preferences"); len(elem) >= l && elem[0:l] == "preferences" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetNotificationPreferences"
							r.summary = "通知設定取得"
							r.operationID = "getNotificationPreferences"
							r.pathPattern = "/notifications/preferences"
							r.args = args
							r.count = 0
							return r, true
						case "PUT":
							r.name = "UpdateNotificationPreferences"
							r.summary = "通知設定更新"
							r.operationID = "updateNotificationPreferences"
							r.pathPattern = "/notifications/preferences"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'o': // Prefix: "o"
				origElem := elem
				if l := len("o"); len(elem) >= l && elem[0:l] == "o" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "pinions"
					origElem := elem
					if l := len("pinions"); len(elem) >= l && elem[0:l] == "pinions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = "PostOpinionPost2"
							r.summary = "セッションに対して意見投稿 or 意見に対するリプライ"
							r.operationID = "postOpinionPost2"
							r.pathPattern = "/opinions"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'h': // Prefix: "histories"
							origElem := elem
							if l := len("histories"); len(elem) >= l && elem[0:l] == "histories" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "OpinionsHistory"
									r.summary = "今までに投稿した意見"
									r.operationID = "opinionsHistory"
									r.pathPattern = "/opinions/histories"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'r': // Prefix: "report_reasons"
							origElem := elem
							if l := len("report_reasons"); len(elem) >= l && elem[0:l] == "report_reasons" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetOpinionReportReasons"
									r.summary = "意見への通報理由一覧"
									r.operationID = "getOpinionReportReasons"
									r.pathPattern = "/opinions/report_reasons"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "opinionID"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetOpinionDetail2"
								r.summary = "意見詳細"
								r.operationID = "getOpinionDetail2"
								r.pathPattern = "/opinions/{opinionID}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "analysis"
								origElem := elem
								if l := len("analysis"); len(elem) >= l && elem[0:l] == "analysis" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetOpinionAnalysis"
										r.summary = "意見に投票したグループごとの割合"
										r.operationID = "getOpinionAnalysis"
										r.pathPattern = "/opinions/{opinionID}/analysis"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'r': // Prefix: "rep"
								origElem := elem
								if l := len("rep"); len(elem) >= l && elem[0:l] == "rep" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'l': // Prefix: "lies"
									origElem := elem
									if l := len("lies"); len(elem) >= l && elem[0:l] == "lies" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "OpinionComments2"
											r.summary = "意見に対するリプライ意見一覧"
											r.operationID = "opinionComments2"
											r.pathPattern = "/opinions/{opinionID}/replies"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'o': // Prefix: "ort"
									origElem := elem
									if l := len("ort"); len(elem) >= l && elem[0:l] == "ort" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "ReportOpinion"
											r.summary = "意見通報API"
											r.operationID = "reportOpinion"
											r.pathPattern = "/opinions/{opinionID}/report"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 's': // Prefix: "s"
										origElem := elem
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "GetOpinionReports"
												r.summary = "意見に対する通報取得"
												r.operationID = "getOpinionReports"
												r.pathPattern = "/opinions/{opinionID}/reports"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/solve"
											origElem := elem
											if l := len("/solve"); len(elem) >= l && elem[0:l] == "/solve" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = "SolveOpinionReport"
													r.summary = "通報を解決"
													r.operationID = "solveOpinionReport"
													r.pathPattern = "/opinions/{opinionID}/reports/solve"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'v': // Prefix: "votes"
								origElem := elem
								if l := len("votes"); len(elem) >= l && elem[0:l] == "votes" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "Vote2"
										r.summary = "意思表明API"
										r.operationID = "vote2"
										r.pathPattern = "/opinions/{opinionID}/votes"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "rganization"
					origElem := elem
					if l := len("rganization"); len(elem) >= l && elem[0:l] == "rganization" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "code"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/validate"
							origElem := elem
							if l := len("/validate"); len(elem) >= l && elem[0:l] == "/validate" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "ValidateOrganizationCode"
									r.summary = "組織コード検証"
									r.operationID = "validateOrganizationCode"
									r.pathPattern = "/organization/{code}/validate"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 's': // Prefix: "s"
						origElem := elem
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetOrganizations"
								r.summary = "所属組織一覧"
								r.operationID = "getOrganizations"
								r.pathPattern = "/organizations"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "EstablishOrganization"
								r.summary = "組織作成（運営ユーザーのみ）"
								r.operationID = "establishOrganization"
								r.pathPattern = "/organizations"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "aliases"
								origElem := elem
								if l := len("aliases"); len(elem) >= l && elem[0:l] == "aliases" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetOrganizationAliases"
										r.summary = "組織エイリアス一覧取得"
										r.operationID = "getOrganizationAliases"
										r.pathPattern = "/organizations/aliases"
										r.args = args
										r.count = 0
										return r, true
									case "POST":
										r.name = "CreateOrganizationAlias"
										r.summary = "組織エイリアス作成"
										r.operationID = "createOrganizationAlias"
										r.pathPattern = "/organizations/aliases"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "aliasID"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "DeleteOrganizationAlias"
											r.summary = "組織エイリアス削除"
											r.operationID = "deleteOrganizationAlias"
											r.pathPattern = "/organizations/aliases/{aliasID}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'i': // Prefix: "invite"
								origElem := elem
								if l := len("invite"); len(elem) >= l && elem[0:l] == "invite" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "InviteOrganization"
										r.summary = "組織ユーザー招待（運営ユーザーのみ）"
										r.operationID = "inviteOrganization"
										r.pathPattern = "/organizations/invite"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_user"
									origElem := elem
									if l := len("_user"); len(elem) >= l && elem[0:l] == "_user" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = "InviteOrganizationForUser"
											r.summary = "組織にユーザーを追加"
											r.operationID = "inviteOrganizationForUser"
											r.pathPattern = "/organizations/invite_user"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'u': // Prefix: "users"
								origElem := elem
								if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetOrganizationUsers"
										r.summary = "現在の組織のユーザー一覧取得"
										r.operationID = "getOrganizationUsers"
										r.pathPattern = "/organizations/users"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'p': // Prefix: "policy/consent"
				origElem := elem
				if l := len("policy/consent"); len(elem) >= l && elem[0:l] == "policy/consent" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = "GetPolicyConsentStatus"
						r.summary = "最新のポリシーに同意したかを取得"
						r.operationID = "getPolicyConsentStatus"
						r.pathPattern = "/policy/consent"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "PolicyConsent"
						r.summary = "最新のポリシーに同意する"
						r.operationID = "policyConsent"
						r.pathPattern = "/policy/consent"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'r': // Prefix: "report/feedback"
				origElem := elem
				if l := len("report/feedback"); len(elem) >= l && elem[0:l] == "report/feedback" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = "ApplyFeedbackToReport"
						r.summary = "セッションのレポートにフィードバックを適用する"
						r.operationID = "applyFeedbackToReport"
						r.pathPattern = "/report/feedback"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 't': // Prefix: "t"
				origElem := elem
				if l := len("t"); len(elem) >= l && elem[0:l] == "t" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "alksessions"
					origElem := elem
					if l := len("alksessions"); len(elem) >= l && elem[0:l] == "alksessions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetTalkSessionList"
							r.summary = "セッション一覧"
							r.operationID = "getTalkSessionList"
							r.pathPattern = "/talksessions"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "InitiateTalkSession"
							r.summary = "セッション作成"
							r.operationID = "initiateTalkSession"
							r.pathPattern = "/talksessions"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'h': // Prefix: "histories"
							origElem := elem
							if l := len("histories"); len(elem) >= l && elem[0:l] == "histories" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "SessionsHistory"
									r.summary = "リアクション済みのセッション一覧"
									r.operationID = "sessionsHistory"
									r.pathPattern = "/talksessions/histories"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'o': // Prefix: "opened"
							origElem := elem
							if l := len("opened"); len(elem) >= l && elem[0:l] == "opened" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetOpenedTalkSession"
									r.summary = "自分が開いたセッション一覧"
									r.operationID = "getOpenedTalkSession"
									r.pathPattern = "/talksessions/opened"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'r': // Prefix: "restrictions"
							origElem := elem
							if l := len("restrictions"); len(elem) >= l && elem[0:l] == "restrictions" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetTalkSessionRestrictionKeys"
									r.summary = "セッションで指定可能な制限一覧"
									r.operationID = "getTalkSessionRestrictionKeys"
									r.pathPattern = "/talksessions/restrictions"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "talkSessionID"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetTalkSessionDetail"
								r.summary = "トークセッションの詳細"
								r.operationID = "getTalkSessionDetail"
								r.pathPattern = "/talksessions/{talkSessionID}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = "EditTalkSession"
								r.summary = "セッション編集"
								r.operationID = "editTalkSession"
								r.pathPattern = "/talksessions/{talkSessionID}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "analysis"
								origElem := elem
								if l := len("analysis"); len(elem) >= l && elem[0:l] == "analysis" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "TalkSessionAnalysis"
										r.summary = "分析結果一覧"
										r.operationID = "talkSessionAnalysis"
										r.pathPattern = "/talksessions/{talkSessionID}/analysis"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'c': // Prefix: "con"
								origElem := elem
								if l := len("con"); len(elem) >= l && elem[0:l] == "con" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "clusion"
									origElem := elem
									if l := len("clusion"); len(elem) >= l && elem[0:l] == "clusion" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetConclusion"
											r.summary = "結論取得"
											r.operationID = "getConclusion"
											r.pathPattern = "/talksessions/{talkSessionID}/conclusion"
											r.args = args
											r.count = 1
											return r, true
										case "POST":
											r.name = "PostConclusion"
											r.summary = "結論投稿"
											r.operationID = "postConclusion"
											r.pathPattern = "/talksessions/{talkSessionID}/conclusion"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 's': // Prefix: "sent"
									origElem := elem
									if l := len("sent"); len(elem) >= l && elem[0:l] == "sent" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "HasConsent"
											r.summary = "セッションに同意しているか"
											r.operationID = "hasConsent"
											r.pathPattern = "/talksessions/{talkSessionID}/consent"
											r.args = args
											r.count = 1
											return r, true
										case "POST":
											r.name = "ConsentTalkSession"
											r.summary = "セッションへの同意"
											r.operationID = "consentTalkSession"
											r.pathPattern = "/talksessions/{talkSessionID}/consent"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'o': // Prefix: "opinions"
								origElem := elem
								if l := len("opinions"); len(elem) >= l && elem[0:l] == "opinions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetOpinionsForTalkSession"
										r.summary = "セッションに対する意見一覧"
										r.operationID = "getOpinionsForTalkSession"
										r.pathPattern = "/talksessions/{talkSessionID}/opinions"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'r': // Prefix: "re"
								origElem := elem
								if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'p': // Prefix: "port"
									origElem := elem
									if l := len("port"); len(elem) >= l && elem[0:l] == "port" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetTalkSessionReport"
											r.summary = "セッションレポートを返す"
											r.operationID = "getTalkSessionReport"
											r.pathPattern = "/talksessions/{talkSessionID}/report"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 's': // Prefix: "s"
										origElem := elem
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "GetReportsForTalkSession"
												r.summary = "通報一覧"
												r.operationID = "getReportsForTalkSession"
												r.pathPattern = "/talksessions/{talkSessionID}/reports"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/count"
											origElem := elem
											if l := len("/count"); len(elem) >= l && elem[0:l] == "/count" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "GET":
													r.name = "GetTalkSessionReportCount"
													r.summary = "通報件数"
													r.operationID = "getTalkSessionReportCount"
													r.pathPattern = "/talksessions/{talkSessionID}/reports/count"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								case 's': // Prefix: "strictions"
									origElem := elem
									if l := len("strictions"); len(elem) >= l && elem[0:l] == "strictions" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetTalkSessionRestrictionSatisfied"
											r.summary = "セッションで満たしていない制限"
											r.operationID = "getTalkSessionRestrictionSatisfied"
											r.pathPattern = "/talksessions/{talkSessionID}/restrictions"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "swipe_opinions"
								origElem := elem
								if l := len("swipe_opinions"); len(elem) >= l && elem[0:l] == "swipe_opinions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "SwipeOpinions"
										r.summary = "スワイプ用のエンドポイント"
										r.operationID = "swipeOpinions"
										r.pathPattern = "/talksessions/{talkSessionID}/swipe_opinions"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 't': // Prefix: "timeline"
								origElem := elem
								if l := len("timeline"); len(elem) >= l && elem[0:l] == "timeline" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "PostTimeLineItem"
										r.summary = "タイムラインアイテム追加"
										r.operationID = "postTimeLineItem"
										r.pathPattern = "/talksessions/{talkSessionID}/timeline"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 's': // Prefix: "s"
									origElem := elem
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetTimeLine"
											r.summary = "タイムライン取得"
											r.operationID = "getTimeLine"
											r.pathPattern = "/talksessions/{talkSessionID}/timelines"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "actionItemID"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "PUT":
												r.name = "EditTimeLine"
												r.summary = "タイムライン編集"
												r.operationID = "editTimeLine"
												r.pathPattern = "/talksessions/{talkSessionID}/timelines/{actionItemID}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'e': // Prefix: "est"
					origElem := elem
					if l := len("est"); len(elem) >= l && elem[0:l] == "est" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "Test"
							r.summary = "OpenAPIテスト用"
							r.operationID = "test"
							r.pathPattern = "/test"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/dummy"
						origElem := elem
						if l := len("/dummy"); len(elem) >= l && elem[0:l] == "/dummy" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "DummiInit"
								r.summary = "mudai"
								r.operationID = "dummiInit"
								r.pathPattern = "/test/dummy"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'u': // Prefix: "user"
				origElem := elem
				if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = "GetUserInfo"
						r.summary = "ユーザー情報の取得"
						r.operationID = "getUserInfo"
						r.pathPattern = "/user"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "EstablishUser"
						r.summary = "ユーザー作成"
						r.operationID = "establishUser"
						r.pathPattern = "/user"
						r.args = args
						r.count = 0
						return r, true
					case "PUT":
						r.name = "UpdateUserProfile"
						r.summary = "ユーザー情報の変更"
						r.operationID = "updateUserProfile"
						r.pathPattern = "/user"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'v': // Prefix: "v1/manage/"
				origElem := elem
				if l := len("v1/manage/"); len(elem) >= l && elem[0:l] == "v1/manage/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 't': // Prefix: "talksessions/"
					origElem := elem
					if l := len("talksessions/"); len(elem) >= l && elem[0:l] == "talksessions/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'l': // Prefix: "list"
						origElem := elem
						if l := len("list"); len(elem) >= l && elem[0:l] == "list" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetTalkSessionListManage"
								r.summary = ""
								r.operationID = "getTalkSessionListManage"
								r.pathPattern = "/v1/manage/talksessions/list"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}
					// Param: "talkSessionID"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetTalkSessionManage"
							r.summary = ""
							r.operationID = "getTalkSessionManage"
							r.pathPattern = "/v1/manage/talksessions/{talkSessionID}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/analysis/re"
						origElem := elem
						if l := len("/analysis/re"); len(elem) >= l && elem[0:l] == "/analysis/re" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'g': // Prefix: "generate"
							origElem := elem
							if l := len("generate"); len(elem) >= l && elem[0:l] == "generate" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "ManageRegenerateManage"
									r.summary = ""
									r.operationID = "manageRegenerateManage"
									r.pathPattern = "/v1/manage/talksessions/{talkSessionID}/analysis/regenerate"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'p': // Prefix: "port"
							origElem := elem
							if l := len("port"); len(elem) >= l && elem[0:l] == "port" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetAnalysisReportManage"
									r.summary = ""
									r.operationID = "getAnalysisReportManage"
									r.pathPattern = "/v1/manage/talksessions/{talkSessionID}/analysis/report"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									r.name = "ToggleReportVisibilityManage"
									r.summary = ""
									r.operationID = "toggleReportVisibilityManage"
									r.pathPattern = "/v1/manage/talksessions/{talkSessionID}/analysis/report"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'u': // Prefix: "users/"
					origElem := elem
					if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'l': // Prefix: "list"
						origElem := elem
						if l := len("list"); len(elem) >= l && elem[0:l] == "list" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetUserListManage"
								r.summary = ""
								r.operationID = "getUserListManage"
								r.pathPattern = "/v1/manage/users/list"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 's': // Prefix: "stats/"
						origElem := elem
						if l := len("stats/"); len(elem) >= l && elem[0:l] == "stats/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "list"
							origElem := elem
							if l := len("list"); len(elem) >= l && elem[0:l] == "list" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetUserStatsListManage"
									r.summary = ""
									r.operationID = "getUserStatsListManage"
									r.pathPattern = "/v1/manage/users/stats/list"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 't': // Prefix: "total"
							origElem := elem
							if l := len("total"); len(elem) >= l && elem[0:l] == "total" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetUserStatsTotalManage"
									r.summary = ""
									r.operationID = "getUserStatsTotalManage"
									r.pathPattern = "/v1/manage/users/stats/total"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
