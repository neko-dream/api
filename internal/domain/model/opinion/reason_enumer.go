// Code generated by "enumer -type=Reason -trimprefix=Reason -transform=kebab -linecomment"; DO NOT EDIT.

package opinion

import (
	"fmt"
	"strings"
)

const _ReasonName = "inappropriateirrelevantspamprivacy"

var _ReasonIndex = [...]uint8{0, 13, 23, 27, 34}

const _ReasonLowerName = "inappropriateirrelevantspamprivacy"

func (i Reason) String() string {
	i -= 1
	if i < 0 || i >= Reason(len(_ReasonIndex)-1) {
		return fmt.Sprintf("Reason(%d)", i+1)
	}
	return _ReasonName[_ReasonIndex[i]:_ReasonIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ReasonNoOp() {
	var x [1]struct{}
	_ = x[ReasonInappropriate-(1)]
	_ = x[ReasonIrrelevant-(2)]
	_ = x[ReasonSpam-(3)]
	_ = x[ReasonPrivacy-(4)]
}

var _ReasonValues = []Reason{ReasonInappropriate, ReasonIrrelevant, ReasonSpam, ReasonPrivacy}

var _ReasonNameToValueMap = map[string]Reason{
	_ReasonName[0:13]:       ReasonInappropriate,
	_ReasonLowerName[0:13]:  ReasonInappropriate,
	_ReasonName[13:23]:      ReasonIrrelevant,
	_ReasonLowerName[13:23]: ReasonIrrelevant,
	_ReasonName[23:27]:      ReasonSpam,
	_ReasonLowerName[23:27]: ReasonSpam,
	_ReasonName[27:34]:      ReasonPrivacy,
	_ReasonLowerName[27:34]: ReasonPrivacy,
}

var _ReasonNames = []string{
	_ReasonName[0:13],
	_ReasonName[13:23],
	_ReasonName[23:27],
	_ReasonName[27:34],
}

// ReasonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ReasonString(s string) (Reason, error) {
	if val, ok := _ReasonNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ReasonNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Reason values", s)
}

// ReasonValues returns all values of the enum
func ReasonValues() []Reason {
	return _ReasonValues
}

// ReasonStrings returns a slice of all String values of the enum
func ReasonStrings() []string {
	strs := make([]string, len(_ReasonNames))
	copy(strs, _ReasonNames)
	return strs
}

// IsAReason returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Reason) IsAReason() bool {
	for _, v := range _ReasonValues {
		if i == v {
			return true
		}
	}
	return false
}
