// Code generated by MockGen. DO NOT EDIT.
// Source: organization_user.go
//
// Generated by this command:
//
//	mockgen -source=organization_user.go -package=mock_organization_model -destination=../mock/organization/organization_user.go
//

// Package mock_organization_model is a generated GoMock package.
package mock_organization_model

import (
	context "context"
	reflect "reflect"

	organization "github.com/neko-dream/api/internal/domain/model/organization"
	shared "github.com/neko-dream/api/internal/domain/model/shared"
	user "github.com/neko-dream/api/internal/domain/model/user"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationUserRepository is a mock of OrganizationUserRepository interface.
type MockOrganizationUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationUserRepositoryMockRecorder
	isgomock struct{}
}

// MockOrganizationUserRepositoryMockRecorder is the mock recorder for MockOrganizationUserRepository.
type MockOrganizationUserRepositoryMockRecorder struct {
	mock *MockOrganizationUserRepository
}

// NewMockOrganizationUserRepository creates a new mock instance.
func NewMockOrganizationUserRepository(ctrl *gomock.Controller) *MockOrganizationUserRepository {
	mock := &MockOrganizationUserRepository{ctrl: ctrl}
	mock.recorder = &MockOrganizationUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationUserRepository) EXPECT() *MockOrganizationUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrganizationUserRepository) Create(ctx context.Context, orgUser organization.OrganizationUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, orgUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrganizationUserRepositoryMockRecorder) Create(ctx, orgUser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrganizationUserRepository)(nil).Create), ctx, orgUser)
}

// FindByOrganizationID mocks base method.
func (m *MockOrganizationUserRepository) FindByOrganizationID(ctx context.Context, orgID shared.UUID[organization.Organization]) ([]*organization.OrganizationUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOrganizationID", ctx, orgID)
	ret0, _ := ret[0].([]*organization.OrganizationUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOrganizationID indicates an expected call of FindByOrganizationID.
func (mr *MockOrganizationUserRepositoryMockRecorder) FindByOrganizationID(ctx, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOrganizationID", reflect.TypeOf((*MockOrganizationUserRepository)(nil).FindByOrganizationID), ctx, orgID)
}

// FindByOrganizationIDAndUserID mocks base method.
func (m *MockOrganizationUserRepository) FindByOrganizationIDAndUserID(ctx context.Context, orgID shared.UUID[organization.Organization], userID shared.UUID[user.User]) (*organization.OrganizationUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOrganizationIDAndUserID", ctx, orgID, userID)
	ret0, _ := ret[0].(*organization.OrganizationUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOrganizationIDAndUserID indicates an expected call of FindByOrganizationIDAndUserID.
func (mr *MockOrganizationUserRepositoryMockRecorder) FindByOrganizationIDAndUserID(ctx, orgID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOrganizationIDAndUserID", reflect.TypeOf((*MockOrganizationUserRepository)(nil).FindByOrganizationIDAndUserID), ctx, orgID, userID)
}

// FindByUserID mocks base method.
func (m *MockOrganizationUserRepository) FindByUserID(ctx context.Context, userID shared.UUID[user.User]) ([]*organization.OrganizationUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].([]*organization.OrganizationUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockOrganizationUserRepositoryMockRecorder) FindByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockOrganizationUserRepository)(nil).FindByUserID), ctx, userID)
}
