// Code generated by MockGen. DO NOT EDIT.
// Source: organization.go
//
// Generated by this command:
//
//	mockgen -source=organization.go -package=mock_organization_model -destination=../mock/organization/organization.go
//

// Package mock_organization_model is a generated GoMock package.
package mock_organization_model

import (
	context "context"
	reflect "reflect"

	organization "github.com/neko-dream/server/internal/domain/model/organization"
	shared "github.com/neko-dream/server/internal/domain/model/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationRepository is a mock of OrganizationRepository interface.
type MockOrganizationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationRepositoryMockRecorder
}

// MockOrganizationRepositoryMockRecorder is the mock recorder for MockOrganizationRepository.
type MockOrganizationRepositoryMockRecorder struct {
	mock *MockOrganizationRepository
}

// NewMockOrganizationRepository creates a new mock instance.
func NewMockOrganizationRepository(ctrl *gomock.Controller) *MockOrganizationRepository {
	mock := &MockOrganizationRepository{ctrl: ctrl}
	mock.recorder = &MockOrganizationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationRepository) EXPECT() *MockOrganizationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrganizationRepository) Create(ctx context.Context, org *organization.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, org)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrganizationRepositoryMockRecorder) Create(ctx, org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrganizationRepository)(nil).Create), ctx, org)
}

// FindByCode mocks base method.
func (m *MockOrganizationRepository) FindByCode(ctx context.Context, code string) (*organization.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCode", ctx, code)
	ret0, _ := ret[0].(*organization.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCode indicates an expected call of FindByCode.
func (mr *MockOrganizationRepositoryMockRecorder) FindByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCode", reflect.TypeOf((*MockOrganizationRepository)(nil).FindByCode), ctx, code)
}

// FindByID mocks base method.
func (m *MockOrganizationRepository) FindByID(ctx context.Context, id shared.UUID[organization.Organization]) (*organization.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*organization.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockOrganizationRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockOrganizationRepository)(nil).FindByID), ctx, id)
}

// FindByIDs mocks base method.
func (m *MockOrganizationRepository) FindByIDs(ctx context.Context, ids []shared.UUID[organization.Organization]) ([]*organization.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", ctx, ids)
	ret0, _ := ret[0].([]*organization.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockOrganizationRepositoryMockRecorder) FindByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockOrganizationRepository)(nil).FindByIDs), ctx, ids)
}

// FindByName mocks base method.
func (m *MockOrganizationRepository) FindByName(ctx context.Context, name string) (*organization.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", ctx, name)
	ret0, _ := ret[0].(*organization.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockOrganizationRepositoryMockRecorder) FindByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockOrganizationRepository)(nil).FindByName), ctx, name)
}

// Update mocks base method.
func (m *MockOrganizationRepository) Update(ctx context.Context, org *organization.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, org)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrganizationRepositoryMockRecorder) Update(ctx, org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrganizationRepository)(nil).Update), ctx, org)
}
