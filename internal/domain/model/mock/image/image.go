// Code generated by MockGen. DO NOT EDIT.
// Source: image.go
//
// Generated by this command:
//
//	mockgen -source=image.go -package=mock_image_model -destination=../mock/image/image.go
//

// Package mock_image_model is a generated GoMock package.
package mock_image_model

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	image "github.com/neko-dream/server/internal/domain/model/image"
	meta "github.com/neko-dream/server/internal/domain/model/image/meta"
	shared "github.com/neko-dream/server/internal/domain/model/shared"
	user "github.com/neko-dream/server/internal/domain/model/user"
	gomock "go.uber.org/mock/gomock"
)

// MockImageStorage is a mock of ImageStorage interface.
type MockImageStorage struct {
	ctrl     *gomock.Controller
	recorder *MockImageStorageMockRecorder
}

// MockImageStorageMockRecorder is the mock recorder for MockImageStorage.
type MockImageStorageMockRecorder struct {
	mock *MockImageStorage
}

// NewMockImageStorage creates a new mock instance.
func NewMockImageStorage(ctrl *gomock.Controller) *MockImageStorage {
	mock := &MockImageStorage{ctrl: ctrl}
	mock.recorder = &MockImageStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageStorage) EXPECT() *MockImageStorageMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockImageStorage) Upload(arg0 context.Context, arg1 meta.ImageMeta, arg2 *multipart.FileHeader) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0, arg1, arg2)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockImageStorageMockRecorder) Upload(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockImageStorage)(nil).Upload), arg0, arg1, arg2)
}

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockImageRepository) Create(arg0 context.Context, arg1 *image.UserImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockImageRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockImageRepository)(nil).Create), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockImageRepository) FindByID(arg0 context.Context, arg1 shared.UUID[image.UserImage]) (*image.UserImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*image.UserImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockImageRepositoryMockRecorder) FindByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockImageRepository)(nil).FindByID), arg0, arg1)
}

// FindByUserID mocks base method.
func (m *MockImageRepository) FindByUserID(arg0 context.Context, arg1 shared.UUID[user.User]) ([]*image.UserImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", arg0, arg1)
	ret0, _ := ret[0].([]*image.UserImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockImageRepositoryMockRecorder) FindByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockImageRepository)(nil).FindByUserID), arg0, arg1)
}
