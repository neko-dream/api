// Code generated by MockGen. DO NOT EDIT.
// Source: organization_member_manager.go
//
// Generated by this command:
//
//	mockgen -source=organization_member_manager.go -package=mock_organization -destination=../mock/organization/organization_member_manager.go
//

// Package mock_organization is a generated GoMock package.
package mock_organization

import (
	context "context"
	reflect "reflect"

	organization "github.com/neko-dream/server/internal/domain/model/organization"
	shared "github.com/neko-dream/server/internal/domain/model/shared"
	user "github.com/neko-dream/server/internal/domain/model/user"
	organization0 "github.com/neko-dream/server/internal/domain/service/organization"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationMemberManager is a mock of OrganizationMemberManager interface.
type MockOrganizationMemberManager struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationMemberManagerMockRecorder
}

// MockOrganizationMemberManagerMockRecorder is the mock recorder for MockOrganizationMemberManager.
type MockOrganizationMemberManagerMockRecorder struct {
	mock *MockOrganizationMemberManager
}

// NewMockOrganizationMemberManager creates a new mock instance.
func NewMockOrganizationMemberManager(ctrl *gomock.Controller) *MockOrganizationMemberManager {
	mock := &MockOrganizationMemberManager{ctrl: ctrl}
	mock.recorder = &MockOrganizationMemberManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationMemberManager) EXPECT() *MockOrganizationMemberManagerMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockOrganizationMemberManager) AddUser(ctx context.Context, params organization0.InviteUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockOrganizationMemberManagerMockRecorder) AddUser(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockOrganizationMemberManager)(nil).AddUser), ctx, params)
}

// InviteUser mocks base method.
func (m *MockOrganizationMemberManager) InviteUser(ctx context.Context, params organization0.InviteUserParams) (*organization.OrganizationUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteUser", ctx, params)
	ret0, _ := ret[0].(*organization.OrganizationUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteUser indicates an expected call of InviteUser.
func (mr *MockOrganizationMemberManagerMockRecorder) InviteUser(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUser", reflect.TypeOf((*MockOrganizationMemberManager)(nil).InviteUser), ctx, params)
}

// IsSuperAdmin mocks base method.
func (m *MockOrganizationMemberManager) IsSuperAdmin(ctx context.Context, userID shared.UUID[user.User]) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSuperAdmin", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSuperAdmin indicates an expected call of IsSuperAdmin.
func (mr *MockOrganizationMemberManagerMockRecorder) IsSuperAdmin(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSuperAdmin", reflect.TypeOf((*MockOrganizationMemberManager)(nil).IsSuperAdmin), ctx, userID)
}
